prNumber,Author,measure,relation,Network_x,DB_x,Interpreter_x,Logging_x,Data Structure_x,i18n_x,Setup_x,Microservices_x,Test_x,IO_x,UI_x,App_x,issueTitle,issueBody,issue_Comments,NLP_y,APM_y,Network_y,DB_y,Interpreter_y,Logging_y,Lang_y,Data Structure_y,DevOps_y,i18n_y,Setup_y,Microservices_y,Test_y,Search_y,IO_y,UI_y,Parser_y,Security_y,Cloud_y,App_y,Title,Body,Comments
4549,Rob Platt,1.0,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fixes that renaming a group did not change the group name in the interface,3189,|| when you close and expand the group the change should also be visible no idea though why it is not visible immediately the same issue occurs if you assign an icon or color to the group || might be related to this: || these bug still exists i will work on it || when i press edit group that show `orgjabrefmodelgroupsabstractgroup#name` instead of `orgjabrefguigroupsgroupnodeviewmodel#displayname` why? whats the difference between them? || the `displayname` is a formatted version of `name` for example if `name` contains latex commands like `hell\{o}` then `displayname` is the unicode version `hell√≥` || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || can confirm this has been fixed in:jabref 50-dev--snapshot--2019-01-05--master--d281ece4bwindows 10 100 amd64 java 180_191,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
4780,Rob Platt,1.0,=,,,,,,,,,,,,,,,,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
3931,Rob Platt,1.0,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,3929 correct fetcher messages,3929,,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
3325,Rob Platt,1.0,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,3292: annotations are now automatically refreshed,   -->this pr aims to 3292 by removing the refresh button completely and monitoring the pdf files automatically for changes in the progress of the implementation a few refactorings were made:- extract the file monitoring functionality from `fileupdatemonitor` to a new class and convert the timestamp-based method to the new nio watcher interface- extract the conflict handling code by external bib file changes from the base panel to a new class `databasechangemonitor` where also some of the old code from `fileupdatemonitor` now finds a new home this class is still a bit ugly but in my opinion better than before i hope that the conflict handling still works as expected i tested it but might have missed some special cases/configurations------  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
2614,Rob Platt,1.0,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,cleanup window has a scrollbar now,fix for issue #2501-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| i tried to fix the layout stuff in #2415 i could not really test it so i would ask you to test that version  as soon as the tests run through  || no resize for cleanup window using ````jabref-400-dev--snapshot--2017-02-03--movefiledir--07a1c4477jar```` || this has been fixed with #2614 - and is now included in the dev builds,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
2114,Vincent Gagnon,0.8333,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,ctrl-s parsing error message,2109 ctrl-s doesnt trigger parsing error messageproblem: conflict of local shortcut (of the entry editor) with the global shortcutsolution: local shortcut removed (the action assigned to local and global shortcut is essentially the same (save database))-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1981,Rob Platt,0.8,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,icon does not change when toggling global search,issue: #1979,,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
491,Houssem Nasri,0.8,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,add close all/others/ in database tab menu,see #314,|| :+1: :sunglasses:  || continue discussion in pr #491,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0, Improve library loading UX, When JabRef opens a library  it opens a file  runs the database parser  and after everything is done  creates a new tab in the frame with the contents of the open database.  An improvement would be to first create a tab in the frame  display a loading animation  and after the parser has finished  display all entries (or display every entry as soon as it is parsed).  there is a bug that I couldn t fix  even after data is loaded the group pane will keep showing 0 entry  you need to navigate away from the tab and back to get the real number of entries  about applying the improvement on startup  I think having a splash screen will look better something like a blocking dialog that displays a ProgressIndicator  Closes #6417 ![im1](https://imgur.com/fAyMdUX.jpg) ![im2](https://imgur.com/FvDHIwM.jpg) ![im3](https://imgur.com/7juc16x.jpg) ![im4](https://imgur.com/8NLHA2q.jpg) - [ ] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
677,Houssem Nasri,0.8,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,make bibtex parser more robust against missing newlines,as described in #669 and #621 the parser has some problems when an entry (or preamble) follows directly the file encoding header (on the same line) ie `% encoding: myencoding @article{}`actually as the tests reveal it was not a problem with the actual parser but within the file opening logic i dont view this pr as a complete fix for #669 and #621 since not just the parser but also the serialization should be improvedalso fix a bug that prevented the import of bibtex entries having only a key as its content,|| related #621 || @tobiasdiez is this fixed? || @stefan-kolb it will be fixed with #718  || too late in the evening should have seen that myself :smile: :+1:,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0, Improve library loading UX, When JabRef opens a library  it opens a file  runs the database parser  and after everything is done  creates a new tab in the frame with the contents of the open database.  An improvement would be to first create a tab in the frame  display a loading animation  and after the parser has finished  display all entries (or display every entry as soon as it is parsed).  there is a bug that I couldn t fix  even after data is loaded the group pane will keep showing 0 entry  you need to navigate away from the tab and back to get the real number of entries  about applying the improvement on startup  I think having a splash screen will look better something like a blocking dialog that displays a ProgressIndicator  Closes #6417 ![im1](https://imgur.com/fAyMdUX.jpg) ![im2](https://imgur.com/FvDHIwM.jpg) ![im3](https://imgur.com/7juc16x.jpg) ![im4](https://imgur.com/8NLHA2q.jpg) - [ ] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
2995,Rob Platt,0.75,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,less backups,addresses #2993the frequent events are due to the bidirectional binding which transfers every change directly into the bibentry if we want fewer events the only solution will probably be to break the binding which would be very disappointing for the javafx implementation in my point of view the problem is not on the side of event creation after all every change should trigger an event and javafx triggers many changes imho this should be fixed in how we react to eventsi also noticed the exception but do not get a dialog this seems to happen because of the save operation invoked by the backupa solution might be to do less backups by: 1 doing backups only every x events and not for every event 2 ignoring fieldchangeevents in the backup 3 adding the size of the field change in the fieldchangeevent class so that you can ignore it if only 1 character changedthis pr combines options 1 and 3 ie: the backup manager ignores events that are very minor and only does a backup if enough of them have happened (currently set to five)what do you think?-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| fixed by #2995,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1041,Rob Platt,0.75,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,write database type in lower case into the bib file,this finally 963 a quick fix has been introduced in 661eea007e555 but that does not cover the lower case writing of the type```@comment{jabref-meta: database_type:bibtex}```finally gets```@comment{jabref-meta: databasetype:bibtex}```-  change in changelogmd described -> this has been introduced in the development versions after the last release thus no entry required-   -> tests have been adapted to match this new implementation,|| you keep `bibtex` and `biblatex` (instead of `bibtex` and `biblatex`) because of  :innocent:,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5048,Rob Platt,0.75,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,preserve encoding while copy and pasting in maintable,5043encodes and decodes data with utf-8,|| first tests show that copying is fine but pasting alters the encoding via a bibtex parser || i can still reproduce the problem with today `jabref_windows-x64_5_0-dev--snapshot--2019-06-16--master--8d99db113` || the pr is not merged yet you can try the branch version if you like  || it is fixed thanks a lot!**edit**: but wait there is another bug maybe related to this issue here i will test and report**edit2**: the bug #5069 is not related to this issue can be closed if merged || merged this now into master so will be avaiable in a couple of minutes in the master version,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
2226,Rob Platt,0.75,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix for #2218: reenable ads fetcher,(see #2218)fetcher is now working again- ~~ change in changelogmd described~~ affected search based fetcher still unreleased-  tests ~~created for changes~~ pass again- ~~  ()~~-  manually tested changed features in running jabref- ~~  ( [helpjabreforg]( ~~ if you changed the localization: did you run `gradle ate`?~~,|| potential quickfix: user agent? || maybe you can go ahead and try! || not from my smartphone :wink:,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5472,Rob Platt,0.75,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix highlight problem in entry preview,5069 by using markjs        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| issues is from the search highlighting of the search term when you stop searching its back to normal  || the highlighting is handled by this simple javascript code: || i know nothing about jswhat does your last post mean? it is easy to fix or the opposite? || i have tried if this issue still remains in the master branch and not only does it lose formatting it also jumps to the author field automatically so i am rewriting my author after search finds a resultthe formatting goes back to normal when i click to other article not after finishing search as @siedlerchr saidi would like to look at this issue and fix it || the problem is probably that we read the inner text (ie everything without formatting) and then set it as the inner html should work if `documentbodyinnertext` is replaced by `documentbodyinnerhtml` || @tobiasdiez  it is not that easy thats what i did before the problem is then that it displays and searches matches in html tags  || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || confirmed it is fixed and working for methanks a lot,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
937,Rob Platt,0.75,=,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,preview panel is now updated when an entry is cut/deleted,936when an entry is cut/deleted the preview panel will be hidden due to the fact that no entry is selected anymore-  change in changelogmd described?-  ? ( )-  ?-  ?,|| nice video :smile: for reproducing the issue!,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1318,Rob Platt,0.75,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update localization instructions,corrected gradlew task name#1312@koppor  @stefan-kolb,|| in my other pr  #1265   already changed the error/info text output of the consistencytest  output to the new gradle task name edit// linked wrong pr || @siedlerchr wrong pr referenced?,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1168,Ali,0.7,=,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1163 by removing the strange functionality which enabled sorting‚Ä¶,we have some very strange logic in jabref which allows to handle years using only the two last numbers so we can detect that 68 means 1968 this causes a lot of issues i do not think that jabref should still support such strange logic and just use the value which is in the year field hence i removed it this also solves the issue of having that yearutil in the model package which duplicated a method in the stringutil class refs #1163,,0,0,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,0,0,1, Fixed validation before typing in new entry dialog #7020 add ability to insert arxivId Optimize saving, Do not show an error message if there is no error Fixes #7020 #2292  Pasted  arxivId  creates new BibEntry    <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. #7265 Changed to simpleDateFormatter it doesn t throw a lot of exception  <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
3904,Vincent Gagnon,0.6667,=,,,,,,,,,,,,,,,,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
4822,Rob Platt,0.6667,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,convert autolinkfilesaction to javafx,4819also convert a few other message boxes to javafx        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1192,Vincent Gagnon,0.6667,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,preview panel is now updated when an entry is cut/deleted (again),when i fixed #936 some time ago (pr: #937) i made a tiny errorthe issue was to hide the preview panel when deleting/cutting an entry but it also hid it when aborting the delete-confirmation-dialogi too refactored both actions a little to make it easier for future changesi also removed in `undoableremoveentry` and `undoableinsertentry` the id generation,|| nice video :smile: for reproducing the issue!,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
3551,Vincent Gagnon,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,make path relative when adding automatically found file,3476   -->-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| hirelative links are created automatically and this depends on your settings there are 4 settings for files:1 checkbox: use bibfile as main file location -> overwrites all other settings2 main file directory globally in jabref valid for all files3 use and library setting in the properties of the bib file: here you can also enter relative pathso depending on your settings jabref will relatvize all paths against the first found file directory || hiall of these 3 were set in jabref 40 and are still set in the development version im using now (1 checked 2 set to `/home/bitzer/papers` and 3 set to `/home/bitzer/papers` too) still version 40 added relative paths while the development version adds absolute paths || is the location of the bibfile the same as /home/bitzer/papers? if not then uncheck the combobox || yes the bibfile is in /home/bitzer/papers itself also the issue persists in the newest version jabref-41-dev--snapshot--2017-12-08--master--6f39151a7jar || ah i now can reproduce your  behavior it is the auto link which adds it as absolute path if you manually select the file it is correct i will be working on a fix for this || cool thank you!,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
4245,Vincent Gagnon,0.6667,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix style issues in about dialog,        ( (      because github does not support autolinking there -->4202 and a few other small style related issues i also created a little new app that make it simple to test the display of javafx controls as of now i only added a lot of buttons in different styles and states:( merge instead of squashing the commits-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| confirmed under windows 10 latest master the window is too small to show the buttons at bottom and you cant resize them( || i digged a bit into this must be related to some binding the change of our dialog layout stuff under the hood the information for authors etc is correctly filled in the variables - so its not the problemin contrast to other dialogs the binding are directly defined in the fxml,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1487,Vincent Gagnon,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,implement getextension and getdescription for importers,implement getextension and getdescription for importers #1444 -  change in changelogmd described-  ,|| should be fixed by #1487 isnt it?,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
4999,Rob Platt,0.6667,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,fix iee fetcher,4997 add exception dialog on import failcheck if we have keywords field present in json        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks for your report! this was indeed a bug in the ieee fetcher in addtion if any fetcher throws an error it will be displayed in a dialog nowwe would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
2211,Vincent Gagnon,0.6667,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,prevent the search to get focus when deleting/pasting an entry,fixes: #2208when you delete an entry the focus will no longer jump to the searchbar instead it will select the next entry (also counts for pasting),|| @bartsch-dev could you have a look? üòá,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
4964,Vincent Gagnon,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,remove ui threadlist for maintable as it prevents sorting in maintable,4886renenables sortingtried a bit around and could not find any side issue so far        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks for the report that is definitely a regression bug it was working fine a few versions ago if i remember correctlyedit// confirmed on windows 10 with 47f43ca63616f04bfa780c9a8d83143d919d1f80 tjabref 50-devwindows 10 100 amd64 java 180_202 || @tobiasdiez  i found the issue: in the maintable if i remove the bindings wrapper it works again``` thissetitems(bindingshelperforui(modelgetentriesfilteredandsorted()))        // enable sorting        modelgetentriesfilteredandsorted()comparatorproperty()bind(thiscomparatorproperty())``` || the issue is not solved in the latest snapshot of today (`2019-05-06 c168c4978`) || @siedlerchr @tobiasdiez what is the problem with this why is the correction not yet applied? it renders my working with jabref very difficult the version snapshot--2019-05-10--master--751c5b5e7 does not have sorting back || please be patient!  we understand that this is an important issue as long as the issue is not closed its not fixed no need to constantly question it  come on you know the ruleswhile the fix looks simple it might have other consequences which we need to check but i will look at it in detail now || should be fixe now in the latest master 3baa6bd we would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version || great it works! thanks,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
4604,Rob Platt,0.6667,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,enable default cursor for new entry,4600sets text field on focus at the end of initialization by running the javafx thread-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks to @chelseyong this is now implemented in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
4258,Vincent Gagnon,0.6667,=,,,,,,,,,,,,,,,,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1944,Rob Platt,0.6667,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,try around with xmlunit,   -->see #1943 for details -  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1888,Vincent Gagnon,0.6667,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,do not mark a new database as changed,1881  i missed an if-statement when inverting an if/else in #1830 - ~~ change in changelogmd described~~ - introduced in development version only (fortunately)-  manually tested changed features in running jabref,|| this is already the case? _file_ -> _new database_ *- do nothing - *_file_ -> _close database_no message is shown || not in my development version just noticed it so i think it is something quite recent || i can confirm this behaviour in the dev version on windows to || my bad ill add a pr fixing this in a minute,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
3709,Rob Platt,0.6667,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,group separator escaping,3646,|| duplicate of #365,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1443,Vincent Gagnon,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,651: improve parsing of author names containing braces,651-  change in changelogmd described-  -   (),|| yeapi remove all the latex stuf and opened ok (the eof error persist) || one should probably use the bibtex-vm-based name formatters || note that the above is a bad example since the correct way to write the acute accent is `\{e}` and `h\{e}l\grave{e}ne fiaux` is correctly written as `fiaux h`however `h{e}lene fiaux` results in the unexpected `fiaux he` || i propose to close this as it is only a very minor bug which only occurs in very special circumstances with bad input any objections @jabref/developers ?,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5210,Rob Platt,0.5,=,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix double paste on different os,4845 fixes #4699 fixes #4836 upon pasting macos calls the system paste as well as jabrefframeeditaction#execute() this caused a duplicate call of the paste,|| cannot confirm under windows please try java 8u202 as there have been several bug fixes for mac: || it still persists with latest (18u202) oracle jdk || addon: if an entry is pasted into the maintable it is also pasted twice || reproduced this bug start to work on it  || thanks to @linusdietz  and @stefan-kolb  this issue is now fixed in the latest master!,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5210,Rob Platt,0.5,=,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix double paste on different os,4845 fixes #4699 fixes #4836 upon pasting macos calls the system paste as well as jabrefframeeditaction#execute() this caused a duplicate call of the paste,|| seems to be only a mac issue on windows 10 i cannot confirm this try updating your java to 8u202 there have been several mac specific fixes || > seems to be only a mac issue on windows 10 i cannot confirm this> try updating your java to 8u202 there have been several mac specific fixesi did the update  however the issue is unaffected || i have a mac os i will investigate it  || @bdcaf  @tobiasdiez  cant reproduce it run jabref via `intellij idea` latest master || thanks to @linusdietz  and @stefan-kolb  this issue is now fixed in the latest master!,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5210,Graeme Stewart,0.5,=,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix double paste on different os,4845 fixes #4699 fixes #4836 upon pasting macos calls the system paste as well as jabrefframeeditaction#execute() this caused a duplicate call of the paste,|| cannot confirm under windows please try java 8u202 as there have been several bug fixes for mac: || it still persists with latest (18u202) oracle jdk || addon: if an entry is pasted into the maintable it is also pasted twice || reproduced this bug start to work on it  || thanks to @linusdietz  and @stefan-kolb  this issue is now fixed in the latest master!,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0, Change  duplicates  window to recall size/position, The  Possible duplicate entries  window now remembers its size and position throughout a session ([#6582](https://github.com/JabRef/jabref/issues/6582)). This was done by adding a DialogWindowState class to the gui utils. This class stores the size and position of the dialog window. The StateManager class was modified to store this object. It is retrieved whenever a new DuplicateResolverDialog object is created to get the previous size and position and is updated whenever the user proceeds through the dialog options. The DialogWindowState class can be re-used if this feature is needed for other dialog windows.  This is my first ever pull request so please let me know what you think or whether I need to re-tool my approach to be more in line with the structure of the rest of the code! I did not include any screenshots as this felt like a sort of awkward fix to try and take screenshots of.  - [x] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5210,Graeme Stewart,0.5,=,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix double paste on different os,4845 fixes #4699 fixes #4836 upon pasting macos calls the system paste as well as jabrefframeeditaction#execute() this caused a duplicate call of the paste,|| seems to be only a mac issue on windows 10 i cannot confirm this try updating your java to 8u202 there have been several mac specific fixes || > seems to be only a mac issue on windows 10 i cannot confirm this> try updating your java to 8u202 there have been several mac specific fixesi did the update  however the issue is unaffected || i have a mac os i will investigate it  || @bdcaf  @tobiasdiez  cant reproduce it run jabref via `intellij idea` latest master || thanks to @linusdietz  and @stefan-kolb  this issue is now fixed in the latest master!,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0, Change  duplicates  window to recall size/position, The  Possible duplicate entries  window now remembers its size and position throughout a session ([#6582](https://github.com/JabRef/jabref/issues/6582)). This was done by adding a DialogWindowState class to the gui utils. This class stores the size and position of the dialog window. The StateManager class was modified to store this object. It is retrieved whenever a new DuplicateResolverDialog object is created to get the previous size and position and is updated whenever the user proceeds through the dialog options. The DialogWindowState class can be re-used if this feature is needed for other dialog windows.  This is my first ever pull request so please let me know what you think or whether I need to re-tool my approach to be more in line with the structure of the rest of the code! I did not include any screenshots as this felt like a sort of awkward fix to try and take screenshots of.  - [x] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5454,Vincent Gagnon,0.4286,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| @tobiasdiez im working on this,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5454,Vincent Gagnon,0.4286,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| jabref 50-devlinux 500-27-generic amd64 java 180_222cannot reproduce the behaviour mentioned above i reckon this has now been fixed with  (?) || i will start investigations on this || jabref 50-devlinux 500-27-generic amd64 java 1104ok i can now reproduce this behaviour with the current snap version on the --edge channel this indicates that this issue was introduced somewhere between the release of the current snap version (or rather the one from 9th september) on the --beta channel and the current snap version on the --edge channel || @cyraxsector  you can try to narrow down the bug a git bisect: || cannot reproduce the behavior mentioned above can you please provide more information || jabref 50-dev--snapshot--2019-09-26--master--1a6c92c79windows 10 100 amd64 java 1104-bellsofti can still reproduce this behaviour you can force it to happen by scrolling with the mouse wheel in the fetcher sidepane and then switching back to just scrolling with the mouseif you just scroll with the mouse (without using the mouse wheel) you will sometimes encounter the issue and sometimes not but by using the mouse wheel scrolling first and then the mouse scrolling itself afterwards the issue always appears || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || jabref 500-dev--2019-10-18----bc26c3ac5windows 10 100 amd64 java 1202i can confirm that this has been fixed in the current dev version,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
925,Ali,0.4,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,0,0,1, Fixed validation before typing in new entry dialog #7020 add ability to insert arxivId Optimize saving, Do not show an error message if there is no error Fixes #7020 #2292  Pasted  arxivId  creates new BibEntry    <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. #7265 Changed to simpleDateFormatter it doesn t throw a lot of exception  <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
925,Timucin Merdin,0.4,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1, Add multi-sentence title formatting to sentence case and title case add Cleanup for copying over physcial review article id as the page n… add selection copy to preview window Simplify biblatex entry type form, Fixes https://github.com/JabRef/jabref/issues/6759  Added support for multiple-sentence title formatting for the  Sentence Case  and  Title Case  options by using a regular expression to first split the input into sentences  and afterwards processing those sentences individually. A RegEx might not be the best choice for natural language processing but since most titles are only 1 sentence long  the proposed RegEx should cover the vast majority of cases. Also added additional test cases for Sentence Case and Title Case formatting. The old tests are assuming one sentence titles but are still applicable.  - [ ] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. Fixes #7019   Added a cleanup to copy over the article id as the page number for APS journals. This only happens if the page number doesn t exist already.  <!--  Describe the changes you have made here: what  why  ...  Link issues that are fixed  e.g.  Fixes #333 . If you fixed a koppor issue  link it  e.g.  Fixes https://github.com/koppor/jabref/issues/47 . The title of the PR must not reference an issue  because GitHub does not support autolinking there. -->   <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [ ] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. Fixes #6962  Added a feature that allows users to copy highlighted text in the preview window  Screenshot:  ![100c67ff4e73c1cb3ea8e4385da41cdd](https://user-images.githubusercontent.com/47194464/106947983-7179e280-672b-11eb-8a7c-4eef008ab992.png)   - [x] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. Fixes #6730  Related PR: #7485  This is a follow-up PR that simplifies the select entry type form in biblatex mode.  Screenshots: ![entryFormNonExpand](https://user-images.githubusercontent.com/47194464/110112312-dc155100-7db1-11eb-9d94-2e4d1f9fff2e.png)  Expanded: ![entryFormExpand](https://user-images.githubusercontent.com/47194464/110112332-e46d8c00-7db1-11eb-8d98-179114e1ec1f.png)   - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
3766,Vincent Gagnon,0.3333,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0, fixed issue 6692 Fix HTML chars formatter for percent sign, Fixes #6692  renamed listBind to bindContent where it was used Fixes #6753   - [x] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1440,Ali,0.3,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,0,0,1, Fixed validation before typing in new entry dialog #7020 add ability to insert arxivId Optimize saving, Do not show an error message if there is no error Fixes #7020 #2292  Pasted  arxivId  creates new BibEntry    <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. #7265 Changed to simpleDateFormatter it doesn t throw a lot of exception  <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
1440,Timucin Merdin,0.3,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1, Add multi-sentence title formatting to sentence case and title case add Cleanup for copying over physcial review article id as the page n… add selection copy to preview window Simplify biblatex entry type form, Fixes https://github.com/JabRef/jabref/issues/6759  Added support for multiple-sentence title formatting for the  Sentence Case  and  Title Case  options by using a regular expression to first split the input into sentences  and afterwards processing those sentences individually. A RegEx might not be the best choice for natural language processing but since most titles are only 1 sentence long  the proposed RegEx should cover the vast majority of cases. Also added additional test cases for Sentence Case and Title Case formatting. The old tests are assuming one sentence titles but are still applicable.  - [ ] Change in CHANGELOG.md described (if applicable) - [x] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. Fixes #7019   Added a cleanup to copy over the article id as the page number for APS journals. This only happens if the page number doesn t exist already.  <!--  Describe the changes you have made here: what  why  ...  Link issues that are fixed  e.g.  Fixes #333 . If you fixed a koppor issue  link it  e.g.  Fixes https://github.com/koppor/jabref/issues/47 . The title of the PR must not reference an issue  because GitHub does not support autolinking there. -->   <!--  - Go through the list below. If a task has been completed  mark it done by using  [x] . - Please don t remove any items  just leave them unchecked if they are not applicable. -->  - [ ] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [ ] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. Fixes #6962  Added a feature that allows users to copy highlighted text in the preview window  Screenshot:  ![100c67ff4e73c1cb3ea8e4385da41cdd](https://user-images.githubusercontent.com/47194464/106947983-7179e280-672b-11eb-8a7c-4eef008ab992.png)   - [x] Change in CHANGELOG.md described (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository. Fixes #6730  Related PR: #7485  This is a follow-up PR that simplifies the select entry type form in biblatex mode.  Screenshots: ![entryFormNonExpand](https://user-images.githubusercontent.com/47194464/110112312-dc155100-7db1-11eb-9d94-2e4d1f9fff2e.png)  Expanded: ![entryFormExpand](https://user-images.githubusercontent.com/47194464/110112332-e46d8c00-7db1-11eb-8d98-179114e1ec1f.png)   - [x] Change in  CHANGELOG.md  described in a way that is understandable for the average user (if applicable) - [ ] Tests created for changes (if applicable) - [x] Manually tested changed features in running JabRef (always required) - [x] Screenshots added in PR description (for UI changes) - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
5680,Rob Platt,0.25,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,add throttle to autosaveuimanager,as discussed in #5679 there are a lot of save actions performed when autosave is turned on this pr adds a timer which limits the save actions to one in 200ms which is especially handy when automated tasks like find and replace are performed-  change in changelogmd described (if applicable)-  ,,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0, Fixed exception about missing custom css file, Fixes #7177  Java Exception when trying to open the preferences with missing custom theme   After some testing I found that there two main paths that could result in the same failure: the CSS file being missing before application start  and changing the name of the CSS file while the application is running. To resolve the latter  I think the best approach is to check the custom CSS file exists.  This is already done for the Theme as used for most of the application  however the Preview Viewer has it s own CSS URL logic.  Rather than add file checking logic to the Preview Viewer  I have refactored and moved the theme logic of Preview Viewer into Theme  so that all CSS URL logic is encapsulated in that class. I have also put the logic that checks that the URL is valid and filters it to an Optional.empty() into one new method  additionalCssToLoad()  in place of the field of the same name. This ensure that the file existence check is performed in all cases  rather than just at construction of the Theme object.  I have kept the Optional<URL> field so there should be no overhead to this approach for the built in themes  and only the minor and necessary overhead of file existence checking for the custom theme.  For manual testing I checked:  - previews and overall appearance for default theme are correct  after restart - previews and overall appearance for dark theme are correct  after restart - previews and overall appearance with a custom theme with a valid name are correct  after restart - live changes to the custom theme still work  in general and for preview - rename custom theme so that the configured theme is no longer correct  **before application start**. The preview is no longer themed but there is no error. - the preview theme is restored when the filename is restored to the configured value  without restarting the application - Restart. Rename custom theme so that the configured theme is no longer correct  **while application is running**. The preview remains themed (typically sized CSS themes are data URL embedded and so survive file removal).  These tests were run both with the Gradle run task  and on the built binary (rationale: gradle presents the dark theme as a file  while the binary has it built in on a jrt: URL  so the results could be different).  PR tasks:  - [X] Change in CHANGELOG.md described (if applicable) - [X] Tests created for changes (if applicable) - [X] Manually tested changed features in running JabRef (always required) - [X] ~~Screenshots added in PR description (for UI changes)~~ (N/A) - [x] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or  even better  submitted a pull request to the documentation repository.,
