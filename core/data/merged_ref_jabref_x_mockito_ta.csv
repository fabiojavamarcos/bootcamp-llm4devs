prNumber,Author,measure,relation,Network_x,DB_x,Interpreter_x,Logging_x,Data Structure_x,i18n_x,Setup_x,Microservices_x,Test_x,IO_x,UI_x,App_x,issueTitle,issueBody,issue_Comments,Util_y,Network_y,Interpreter_y,Error Handling_y,Lang_y,i18n_y,Setup_y,Logic_y,IO_y,Security_y,Event Handling_y,App_y,Title,Body,Comments
925,Philip P. Moltmann,0.4286,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
1981,Philip P. Moltmann,0.375,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,icon does not change when toggling global search,issue: #1979,,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
4822,Dmitriy Zaitsev,0.3077,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,convert autolinkfilesaction to javafx,4819also convert a few other message boxes to javafx        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),,1,1,1,1,0,1,1,1,1,1,1,1, Add missing copyright headers, - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.,
4999,Dmitriy Zaitsev,0.3077,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,fix iee fetcher,4997 add exception dialog on import failcheck if we have keywords field present in json        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks for your report! this was indeed a bug in the ieee fetcher in addtion if any fetcher throws an error it will be displayed in a dialog nowwe would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version,1,1,1,1,0,1,1,1,1,1,1,1, Add missing copyright headers, - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.,
4604,Dmitriy Zaitsev,0.3077,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,enable default cursor for new entry,4600sets text field on focus at the end of initialization by running the javafx thread-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks to @chelseyong this is now implemented in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version,1,1,1,1,0,1,1,1,1,1,1,1, Add missing copyright headers, - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.,
1944,Dmitriy Zaitsev,0.3077,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,try around with xmlunit,   -->see #1943 for details -  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),,1,1,1,1,0,1,1,1,1,1,1,1, Add missing copyright headers, - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.,
3709,Dmitriy Zaitsev,0.3077,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,group separator escaping,3646,|| duplicate of #365,1,1,1,1,0,1,1,1,1,1,1,1, Add missing copyright headers, - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.,
1168,Philip P. Moltmann,0.3,=,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1163 by removing the strange functionality which enabled sorting‚Ä¶,we have some very strange logic in jabref which allows to handle years using only the two last numbers so we can detect that 68 means 1968 this causes a lot of issues i do not think that jabref should still support such strange logic and just use the value which is in the year field hence i removed it this also solves the issue of having that yearutil in the model package which duplicated a method in the stringutil class refs #1163,,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
2995,Philip P. Moltmann,0.2857,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,less backups,addresses #2993the frequent events are due to the bidirectional binding which transfers every change directly into the bibentry if we want fewer events the only solution will probably be to break the binding which would be very disappointing for the javafx implementation in my point of view the problem is not on the side of event creation after all every change should trigger an event and javafx triggers many changes imho this should be fixed in how we react to eventsi also noticed the exception but do not get a dialog this seems to happen because of the save operation invoked by the backupa solution might be to do less backups by: 1 doing backups only every x events and not for every event 2 ignoring fieldchangeevents in the backup 3 adding the size of the field change in the fieldchangeevent class so that you can ignore it if only 1 character changedthis pr combines options 1 and 3 ie: the backup manager ignores events that are very minor and only does a backup if enough of them have happened (currently set to five)what do you think?-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| fixed by #2995,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
1041,Philip P. Moltmann,0.2857,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,write database type in lower case into the bib file,this finally 963 a quick fix has been introduced in 661eea007e555 but that does not cover the lower case writing of the type```@comment{jabref-meta: database_type:bibtex}```finally gets```@comment{jabref-meta: databasetype:bibtex}```-  change in changelogmd described -> this has been introduced in the development versions after the last release thus no entry required-   -> tests have been adapted to match this new implementation,|| you keep `bibtex` and `biblatex` (instead of `bibtex` and `biblatex`) because of  :innocent:,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
5048,Philip P. Moltmann,0.2857,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,preserve encoding while copy and pasting in maintable,5043encodes and decodes data with utf-8,|| first tests show that copying is fine but pasting alters the encoding via a bibtex parser || i can still reproduce the problem with today `jabref_windows-x64_5_0-dev--snapshot--2019-06-16--master--8d99db113` || the pr is not merged yet you can try the branch version if you like  || it is fixed thanks a lot!**edit**: but wait there is another bug maybe related to this issue here i will test and report**edit2**: the bug #5069 is not related to this issue can be closed if merged || merged this now into master so will be avaiable in a couple of minutes in the master version,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
1318,Philip P. Moltmann,0.2857,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update localization instructions,corrected gradlew task name#1312@koppor  @stefan-kolb,|| in my other pr  #1265   already changed the error/info text output of the consistencytest  output to the new gradle task name edit// linked wrong pr || @siedlerchr wrong pr referenced?,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
1440,Alex Simkin,0.2857,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,1,0,0,0,0,0,1,1,1,0,1,1, Fixes #1618 : Fix strict stubbing profile serialization support. Made CaturingMatcher threadsafe, When strict stubs profile is enabled  mock serialization doesn t work.  This PR fixes this problem. In my tests I faced two problems with current capturing matcher. 1. It exposes its internal store through  #getAllValues() . 2. Internal data store in CapturingMatcher is not threadsafe. Exposing internal store when interraction with mocked object isn t finished may produce all kind of weird exceptions in tests.,
1440,Philip P. Moltmann,0.2857,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
3766,Piotrek Żygieło,0.25,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,1,0,1,0,0,1,0,0,0, Add field type in @Mock example, javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>,
4549,Philip P. Moltmann,0.25,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fixes that renaming a group did not change the group name in the interface,3189,|| when you close and expand the group the change should also be visible no idea though why it is not visible immediately the same issue occurs if you assign an icon or color to the group || might be related to this: || these bug still exists i will work on it || when i press edit group that show `orgjabrefmodelgroupsabstractgroup#name` instead of `orgjabrefguigroupsgroupnodeviewmodel#displayname` why? whats the difference between them? || the `displayname` is a formatted version of `name` for example if `name` contains latex commands like `hell\{o}` then `displayname` is the unicode version `hell√≥` || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || can confirm this has been fixed in:jabref 50-dev--snapshot--2019-01-05--master--d281ece4bwindows 10 100 amd64 java 180_191,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
4780,Philip P. Moltmann,0.25,=,,,,,,,,,,,,,,,,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
3931,Philip P. Moltmann,0.25,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,3929 correct fetcher messages,3929,,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
5210,Piotrek Żygieło,0.25,=,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix double paste on different os,4845 fixes #4699 fixes #4836 upon pasting macos calls the system paste as well as jabrefframeeditaction#execute() this caused a duplicate call of the paste,|| cannot confirm under windows please try java 8u202 as there have been several bug fixes for mac: || it still persists with latest (18u202) oracle jdk || addon: if an entry is pasted into the maintable it is also pasted twice || reproduced this bug start to work on it  || thanks to @linusdietz  and @stefan-kolb  this issue is now fixed in the latest master!,0,0,0,1,0,1,0,0,1,0,0,0, Add field type in @Mock example, javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>,
5210,Piotrek Żygieło,0.25,=,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix double paste on different os,4845 fixes #4699 fixes #4836 upon pasting macos calls the system paste as well as jabrefframeeditaction#execute() this caused a duplicate call of the paste,|| seems to be only a mac issue on windows 10 i cannot confirm this try updating your java to 8u202 there have been several mac specific fixes || > seems to be only a mac issue on windows 10 i cannot confirm this> try updating your java to 8u202 there have been several mac specific fixesi did the update  however the issue is unaffected || i have a mac os i will investigate it  || @bdcaf  @tobiasdiez  cant reproduce it run jabref via `intellij idea` latest master || thanks to @linusdietz  and @stefan-kolb  this issue is now fixed in the latest master!,0,0,0,1,0,1,0,0,1,0,0,0, Add field type in @Mock example, javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>,
3325,Philip P. Moltmann,0.25,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,3292: annotations are now automatically refreshed,   -->this pr aims to 3292 by removing the refresh button completely and monitoring the pdf files automatically for changes in the progress of the implementation a few refactorings were made:- extract the file monitoring functionality from `fileupdatemonitor` to a new class and convert the timestamp-based method to the new nio watcher interface- extract the conflict handling code by external bib file changes from the base panel to a new class `databasechangemonitor` where also some of the old code from `fileupdatemonitor` now finds a new home this class is still a bit ugly but in my opinion better than before i hope that the conflict handling still works as expected i tested it but might have missed some special cases/configurations------  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
2614,Philip P. Moltmann,0.25,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,cleanup window has a scrollbar now,fix for issue #2501-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| i tried to fix the layout stuff in #2415 i could not really test it so i would ask you to test that version  as soon as the tests run through  || no resize for cleanup window using ````jabref-400-dev--snapshot--2017-02-03--movefiledir--07a1c4477jar```` || this has been fixed with #2614 - and is now included in the dev builds,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
3904,Jeffrey Falgout,0.2,=,,,,,,,,,,,,,,,,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
3904,Charles Munger,0.2,=,,,,,,,,,,,,,,,,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
1192,Jeffrey Falgout,0.2,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,preview panel is now updated when an entry is cut/deleted (again),when i fixed #936 some time ago (pr: #937) i made a tiny errorthe issue was to hide the preview panel when deleting/cutting an entry but it also hid it when aborting the delete-confirmation-dialogi too refactored both actions a little to make it easier for future changesi also removed in `undoableremoveentry` and `undoableinsertentry` the id generation,|| nice video :smile: for reproducing the issue!,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
1192,Charles Munger,0.2,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,preview panel is now updated when an entry is cut/deleted (again),when i fixed #936 some time ago (pr: #937) i made a tiny errorthe issue was to hide the preview panel when deleting/cutting an entry but it also hid it when aborting the delete-confirmation-dialogi too refactored both actions a little to make it easier for future changesi also removed in `undoableremoveentry` and `undoableinsertentry` the id generation,|| nice video :smile: for reproducing the issue!,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
2226,Piotrek Żygieło,0.2,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix for #2218: reenable ads fetcher,(see #2218)fetcher is now working again- ~~ change in changelogmd described~~ affected search based fetcher still unreleased-  tests ~~created for changes~~ pass again- ~~  ()~~-  manually tested changed features in running jabref- ~~  ( [helpjabreforg]( ~~ if you changed the localization: did you run `gradle ate`?~~,|| potential quickfix: user agent? || maybe you can go ahead and try! || not from my smartphone :wink:,0,0,0,1,0,1,0,0,1,0,0,0, Add field type in @Mock example, javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>,
3551,Jeffrey Falgout,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,make path relative when adding automatically found file,3476   -->-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| hirelative links are created automatically and this depends on your settings there are 4 settings for files:1 checkbox: use bibfile as main file location -> overwrites all other settings2 main file directory globally in jabref valid for all files3 use and library setting in the properties of the bib file: here you can also enter relative pathso depending on your settings jabref will relatvize all paths against the first found file directory || hiall of these 3 were set in jabref 40 and are still set in the development version im using now (1 checked 2 set to `/home/bitzer/papers` and 3 set to `/home/bitzer/papers` too) still version 40 added relative paths while the development version adds absolute paths || is the location of the bibfile the same as /home/bitzer/papers? if not then uncheck the combobox || yes the bibfile is in /home/bitzer/papers itself also the issue persists in the newest version jabref-41-dev--snapshot--2017-12-08--master--6f39151a7jar || ah i now can reproduce your  behavior it is the auto link which adds it as absolute path if you manually select the file it is correct i will be working on a fix for this || cool thank you!,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
3551,Charles Munger,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,make path relative when adding automatically found file,3476   -->-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| hirelative links are created automatically and this depends on your settings there are 4 settings for files:1 checkbox: use bibfile as main file location -> overwrites all other settings2 main file directory globally in jabref valid for all files3 use and library setting in the properties of the bib file: here you can also enter relative pathso depending on your settings jabref will relatvize all paths against the first found file directory || hiall of these 3 were set in jabref 40 and are still set in the development version im using now (1 checked 2 set to `/home/bitzer/papers` and 3 set to `/home/bitzer/papers` too) still version 40 added relative paths while the development version adds absolute paths || is the location of the bibfile the same as /home/bitzer/papers? if not then uncheck the combobox || yes the bibfile is in /home/bitzer/papers itself also the issue persists in the newest version jabref-41-dev--snapshot--2017-12-08--master--6f39151a7jar || ah i now can reproduce your  behavior it is the auto link which adds it as absolute path if you manually select the file it is correct i will be working on a fix for this || cool thank you!,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
4245,Jeffrey Falgout,0.2,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix style issues in about dialog,        ( (      because github does not support autolinking there -->4202 and a few other small style related issues i also created a little new app that make it simple to test the display of javafx controls as of now i only added a lot of buttons in different styles and states:( merge instead of squashing the commits-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| confirmed under windows 10 latest master the window is too small to show the buttons at bottom and you cant resize them( || i digged a bit into this must be related to some binding the change of our dialog layout stuff under the hood the information for authors etc is correctly filled in the variables - so its not the problemin contrast to other dialogs the binding are directly defined in the fxml,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
4245,Charles Munger,0.2,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix style issues in about dialog,        ( (      because github does not support autolinking there -->4202 and a few other small style related issues i also created a little new app that make it simple to test the display of javafx controls as of now i only added a lot of buttons in different styles and states:( merge instead of squashing the commits-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| confirmed under windows 10 latest master the window is too small to show the buttons at bottom and you cant resize them( || i digged a bit into this must be related to some binding the change of our dialog layout stuff under the hood the information for authors etc is correctly filled in the variables - so its not the problemin contrast to other dialogs the binding are directly defined in the fxml,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
5454,Jeffrey Falgout,0.2,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| @tobiasdiez im working on this,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
5454,Jeffrey Falgout,0.2,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| jabref 50-devlinux 500-27-generic amd64 java 180_222cannot reproduce the behaviour mentioned above i reckon this has now been fixed with  (?) || i will start investigations on this || jabref 50-devlinux 500-27-generic amd64 java 1104ok i can now reproduce this behaviour with the current snap version on the --edge channel this indicates that this issue was introduced somewhere between the release of the current snap version (or rather the one from 9th september) on the --beta channel and the current snap version on the --edge channel || @cyraxsector  you can try to narrow down the bug a git bisect: || cannot reproduce the behavior mentioned above can you please provide more information || jabref 50-dev--snapshot--2019-09-26--master--1a6c92c79windows 10 100 amd64 java 1104-bellsofti can still reproduce this behaviour you can force it to happen by scrolling with the mouse wheel in the fetcher sidepane and then switching back to just scrolling with the mouseif you just scroll with the mouse (without using the mouse wheel) you will sometimes encounter the issue and sometimes not but by using the mouse wheel scrolling first and then the mouse scrolling itself afterwards the issue always appears || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || jabref 500-dev--2019-10-18----bc26c3ac5windows 10 100 amd64 java 1202i can confirm that this has been fixed in the current dev version,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
5454,Charles Munger,0.2,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| @tobiasdiez im working on this,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
5454,Charles Munger,0.2,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| jabref 50-devlinux 500-27-generic amd64 java 180_222cannot reproduce the behaviour mentioned above i reckon this has now been fixed with  (?) || i will start investigations on this || jabref 50-devlinux 500-27-generic amd64 java 1104ok i can now reproduce this behaviour with the current snap version on the --edge channel this indicates that this issue was introduced somewhere between the release of the current snap version (or rather the one from 9th september) on the --beta channel and the current snap version on the --edge channel || @cyraxsector  you can try to narrow down the bug a git bisect: || cannot reproduce the behavior mentioned above can you please provide more information || jabref 50-dev--snapshot--2019-09-26--master--1a6c92c79windows 10 100 amd64 java 1104-bellsofti can still reproduce this behaviour you can force it to happen by scrolling with the mouse wheel in the fetcher sidepane and then switching back to just scrolling with the mouseif you just scroll with the mouse (without using the mouse wheel) you will sometimes encounter the issue and sometimes not but by using the mouse wheel scrolling first and then the mouse scrolling itself afterwards the issue always appears || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || jabref 500-dev--2019-10-18----bc26c3ac5windows 10 100 amd64 java 1202i can confirm that this has been fixed in the current dev version,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
1487,Jeffrey Falgout,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,implement getextension and getdescription for importers,implement getextension and getdescription for importers #1444 -  change in changelogmd described-  ,|| should be fixed by #1487 isnt it?,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
1487,Charles Munger,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,implement getextension and getdescription for importers,implement getextension and getdescription for importers #1444 -  change in changelogmd described-  ,|| should be fixed by #1487 isnt it?,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
937,Piotrek Żygieło,0.2,=,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,preview panel is now updated when an entry is cut/deleted,936when an entry is cut/deleted the preview panel will be hidden due to the fact that no entry is selected anymore-  change in changelogmd described?-  ? ( )-  ?-  ?,|| nice video :smile: for reproducing the issue!,0,0,0,1,0,1,0,0,1,0,0,0, Add field type in @Mock example, javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>,
2211,Jeffrey Falgout,0.2,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,prevent the search to get focus when deleting/pasting an entry,fixes: #2208when you delete an entry the focus will no longer jump to the searchbar instead it will select the next entry (also counts for pasting),|| @bartsch-dev could you have a look? üòá,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
2211,Charles Munger,0.2,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,prevent the search to get focus when deleting/pasting an entry,fixes: #2208when you delete an entry the focus will no longer jump to the searchbar instead it will select the next entry (also counts for pasting),|| @bartsch-dev could you have a look? üòá,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
4964,Jeffrey Falgout,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,remove ui threadlist for maintable as it prevents sorting in maintable,4886renenables sortingtried a bit around and could not find any side issue so far        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks for the report that is definitely a regression bug it was working fine a few versions ago if i remember correctlyedit// confirmed on windows 10 with 47f43ca63616f04bfa780c9a8d83143d919d1f80 tjabref 50-devwindows 10 100 amd64 java 180_202 || @tobiasdiez  i found the issue: in the maintable if i remove the bindings wrapper it works again``` thissetitems(bindingshelperforui(modelgetentriesfilteredandsorted()))        // enable sorting        modelgetentriesfilteredandsorted()comparatorproperty()bind(thiscomparatorproperty())``` || the issue is not solved in the latest snapshot of today (`2019-05-06 c168c4978`) || @siedlerchr @tobiasdiez what is the problem with this why is the correction not yet applied? it renders my working with jabref very difficult the version snapshot--2019-05-10--master--751c5b5e7 does not have sorting back || please be patient!  we understand that this is an important issue as long as the issue is not closed its not fixed no need to constantly question it  come on you know the ruleswhile the fix looks simple it might have other consequences which we need to check but i will look at it in detail now || should be fixe now in the latest master 3baa6bd we would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version || great it works! thanks,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
4964,Charles Munger,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,remove ui threadlist for maintable as it prevents sorting in maintable,4886renenables sortingtried a bit around and could not find any side issue so far        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks for the report that is definitely a regression bug it was working fine a few versions ago if i remember correctlyedit// confirmed on windows 10 with 47f43ca63616f04bfa780c9a8d83143d919d1f80 tjabref 50-devwindows 10 100 amd64 java 180_202 || @tobiasdiez  i found the issue: in the maintable if i remove the bindings wrapper it works again``` thissetitems(bindingshelperforui(modelgetentriesfilteredandsorted()))        // enable sorting        modelgetentriesfilteredandsorted()comparatorproperty()bind(thiscomparatorproperty())``` || the issue is not solved in the latest snapshot of today (`2019-05-06 c168c4978`) || @siedlerchr @tobiasdiez what is the problem with this why is the correction not yet applied? it renders my working with jabref very difficult the version snapshot--2019-05-10--master--751c5b5e7 does not have sorting back || please be patient!  we understand that this is an important issue as long as the issue is not closed its not fixed no need to constantly question it  come on you know the ruleswhile the fix looks simple it might have other consequences which we need to check but i will look at it in detail now || should be fixe now in the latest master 3baa6bd we would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version || great it works! thanks,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
4258,Jeffrey Falgout,0.2,=,,,,,,,,,,,,,,,,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
4258,Charles Munger,0.2,=,,,,,,,,,,,,,,,,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
1888,Jeffrey Falgout,0.2,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,do not mark a new database as changed,1881  i missed an if-statement when inverting an if/else in #1830 - ~~ change in changelogmd described~~ - introduced in development version only (fortunately)-  manually tested changed features in running jabref,|| this is already the case? _file_ -> _new database_ *- do nothing - *_file_ -> _close database_no message is shown || not in my development version just noticed it so i think it is something quite recent || i can confirm this behaviour in the dev version on windows to || my bad ill add a pr fixing this in a minute,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
1888,Charles Munger,0.2,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,do not mark a new database as changed,1881  i missed an if-statement when inverting an if/else in #1830 - ~~ change in changelogmd described~~ - introduced in development version only (fortunately)-  manually tested changed features in running jabref,|| this is already the case? _file_ -> _new database_ *- do nothing - *_file_ -> _close database_no message is shown || not in my development version just noticed it so i think it is something quite recent || i can confirm this behaviour in the dev version on windows to || my bad ill add a pr fixing this in a minute,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
1443,Jeffrey Falgout,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,651: improve parsing of author names containing braces,651-  change in changelogmd described-  -   (),|| yeapi remove all the latex stuf and opened ok (the eof error persist) || one should probably use the bibtex-vm-based name formatters || note that the above is a bad example since the correct way to write the acute accent is `\{e}` and `h\{e}l\grave{e}ne fiaux` is correctly written as `fiaux h`however `h{e}lene fiaux` results in the unexpected `fiaux he` || i propose to close this as it is only a very minor bug which only occurs in very special circumstances with bad input any objections @jabref/developers ?,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
1443,Charles Munger,0.2,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,651: improve parsing of author names containing braces,651-  change in changelogmd described-  -   (),|| yeapi remove all the latex stuf and opened ok (the eof error persist) || one should probably use the bibtex-vm-based name formatters || note that the above is a bad example since the correct way to write the acute accent is `\{e}` and `h\{e}l\grave{e}ne fiaux` is correctly written as `fiaux h`however `h{e}lene fiaux` results in the unexpected `fiaux he` || i propose to close this as it is only a very minor bug which only occurs in very special circumstances with bad input any objections @jabref/developers ?,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
2114,Jeffrey Falgout,0.1818,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,ctrl-s parsing error message,2109 ctrl-s doesnt trigger parsing error messageproblem: conflict of local shortcut (of the entry editor) with the global shortcutsolution: local shortcut removed (the action assigned to local and global shortcut is essentially the same (save database))-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,,1,1,1,1,0,1,0,1,1,0,0,1, Fully register a class ancestry for GenericMetadataSupport Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes, The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497 Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**,
2114,Charles Munger,0.1818,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,ctrl-s parsing error message,2109 ctrl-s doesnt trigger parsing error messageproblem: conflict of local shortcut (of the entry editor) with the global shortcutsolution: local shortcut removed (the action assigned to local and global shortcut is essentially the same (save database))-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,,1,1,1,1,0,1,0,1,1,0,0,1, Use the parent classloader if the context classloader is a child of it. Undo parent for MultipleParentsClassLoader Check package-privacy of method params, This should only affect cases that previously would have thrown an exception. Fixes #2303 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303 This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303,
491,Piotrek Żygieło,0.1667,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,add close all/others/ in database tab menu,see #314,|| :+1: :sunglasses:  || continue discussion in pr #491,0,0,0,1,0,1,0,0,1,0,0,0, Add field type in @Mock example, javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>,
677,Piotrek Żygieło,0.1667,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,make bibtex parser more robust against missing newlines,as described in #669 and #621 the parser has some problems when an entry (or preamble) follows directly the file encoding header (on the same line) ie `% encoding: myencoding @article{}`actually as the tests reveal it was not a problem with the actual parser but within the file opening logic i dont view this pr as a complete fix for #669 and #621 since not just the parser but also the serialization should be improvedalso fix a bug that prevented the import of bibtex entries having only a key as its content,|| related #621 || @tobiasdiez is this fixed? || @stefan-kolb it will be fixed with #718  || too late in the evening should have seen that myself :smile: :+1:,0,0,0,1,0,1,0,0,1,0,0,0, Add field type in @Mock example, javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>,
5472,Robert Stupp,0.125,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix highlight problem in entry preview,5069 by using markjs        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| issues is from the search highlighting of the search term when you stop searching its back to normal  || the highlighting is handled by this simple javascript code: || i know nothing about jswhat does your last post mean? it is easy to fix or the opposite? || i have tried if this issue still remains in the master branch and not only does it lose formatting it also jumps to the author field automatically so i am rewriting my author after search finds a resultthe formatting goes back to normal when i click to other article not after finishing search as @siedlerchr saidi would like to look at this issue and fix it || the problem is probably that we read the inner text (ie everything without formatting) and then set it as the inner html should work if `documentbodyinnertext` is replaced by `documentbodyinnerhtml` || @tobiasdiez  it is not that easy thats what i did before the problem is then that it displays and searches matches in html tags  || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || confirmed it is fixed and working for methanks a lot,1,1,0,1,0,1,0,1,0,1,0,0, mockito on Java 11-ea+21, Fixes #1419   Requires  -Dnet.bytebuddy.experimental=true  system property to be set to let bytebuddy use asm API version  ASM7_EXPERMIENTAL  and use the same one in  InlineBytecodeGenerator .,
5472,Philip P. Moltmann,0.125,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix highlight problem in entry preview,5069 by using markjs        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| issues is from the search highlighting of the search term when you stop searching its back to normal  || the highlighting is handled by this simple javascript code: || i know nothing about jswhat does your last post mean? it is easy to fix or the opposite? || i have tried if this issue still remains in the master branch and not only does it lose formatting it also jumps to the author field automatically so i am rewriting my author after search finds a resultthe formatting goes back to normal when i click to other article not after finishing search as @siedlerchr saidi would like to look at this issue and fix it || the problem is probably that we read the inner text (ie everything without formatting) and then set it as the inner html should work if `documentbodyinnertext` is replaced by `documentbodyinnerhtml` || @tobiasdiez  it is not that easy thats what i did before the problem is then that it displays and searches matches in html tags  || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || confirmed it is fixed and working for methanks a lot,1,1,0,0,0,1,0,1,1,0,0,1, Update public API of InvocationFactory needed for Android static mocking Avoid bytebuddy import Issue to enable repackaging without bytebuddy Enable errorprone build, Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable. This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112 - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.,
