prNumber,Author,measure,relation,Network_x,DB_x,Interpreter_x,Logging_x,Data Structure_x,i18n_x,Setup_x,Microservices_x,Test_x,IO_x,UI_x,App_x,issueTitle,issueBody,issue_Comments,Network_y,Interpreter_y,i18n_y,Logic_y,Test_y,App_y,Title,Body,Comments
1440,Jan Knotek,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, Null check for BufferExactBoundedObserver, - [*] Please give a description about what and why you are contributing  even if it s trivial:  **Improve stability of the library.** Other variants of the onComplete method include this Null check already  e.g. BufferExactUnboundedObserver  this check should fix the case when there is a race condition and buffer is already set to  null  by the time onComplete is called.  It is causing 0.1% crashes in our production app  this should improve stability of other apps too.,
1440,Mathieu Gabriel,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, Fix FlowableOnBackpressureBufferStrategy FlowableWithLatestFrom forgets request, Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy Fix drop strategy logic in FlowableOnBackpressureBufferStrategy Add unit test for FlowableOnBackpressureBufferStrategy  copied from FlowableOnBackpressureBufferTest  there is still some work needed to have a better coverage The following scenario did not work with FlowableWithLatestFrom: Flowable<?> result = source.combineWithLatest(other  someCombiner) - client subscribe to the result stream - source stream emits - other stream emits - source stream emits  expected result: result stream emits the combined event actual result: result stream does not emit anything,
1440,Zach Klippenstein,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, 1.x: Add Completable.doOnCompleted and deprecate Completable.doOnComplete, Closes #3700.,
1440,Volkan Yazıcı,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, Wrap InterruptedException with an unchecked exception in TestSubscriber#awaitValueCount()., In its current form   awaitValueCount()  is the only  TestSubscriber#await* method that throws a checked exception (that is   InterruptedException )  whereas the others wrap it with a  IllegalStateException . This spreads a try-catch disease throughout the entire code base where  awaitValueCount()  is used. One can argue that why not just declaring the exception in the caller method footprint: Because you might be implementing an interface (e.g.  Runnable ) which does not allow any exceptions in its footprint. This patch wraps the  InterruptedException  with an unchecked exception in  TestSubscriber#awaitValueCount() .,
1440,Björn Quentin,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, Use JUnit s assert format for assert messages to enable better suppor…, This changes the message format of  assert  to match that of JUnit. This way IDEs like IntelliJ IDEA are able to parse it and offer functionality like  compare values .,
1440,Yasuhiro SHIMIZU,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, 1.x: add unsubscribeOn to Single type (#5138), resolve #5138   add unsubscribeOn to Single type.,
1440,PunitD,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, 2.x: explain null observer/subscriber error reports in detail from RxJavaPlugins Javadoc : Explain explicitly about using Emitter interface methods synchronously Javadoc: explain that distinctUntilChanged requires non-mutating data to work as expected Change javadoc explanation for Mutable List, This PR is related to issue [#6172](https://github.com/ReactiveX/RxJava/issues/6172). With these changes  all reactive types will emit detailed error message when  onSubscribe  hook installed using RxJavaPlugins returns null  observer/subscriber :  **Observable** >  The RxJavaPlugins.onSubscribe hook returned a null Observer. Please check the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins   **Flowable** > The RxJavaPlugins.onSubscribe hook returned a null FlowableSubscriber. Please check the handler provided to RxJavaPlugins.setOnFlowableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins  **Single** > The RxJavaPlugins.onSubscribe hook returned a null SingleObserver. Please check the handler provided to RxJavaPlugins.setOnSingleSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins  **Maybe** > The RxJavaPlugins.onSubscribe hook returned a null MaybeObserver. Please check the handler provided to RxJavaPlugins.setOnMaybeSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins  **Completable** > The RxJavaPlugins.onSubscribe hook returned a null CompletableObserver. Please check the handler provided to RxJavaPlugins.setOnCompletableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins   **Note :**  There was no null check on  observer  returned from  RxJavaPlugins.onSubscribe(this  observer)  method call in  Completable  s subscribe() method.  So  I ve added it in this PR. Is that fine? Add note in Javadoc explicitly explaining about using Emitter interface methods synchronously.  - Add notes for  generate  methods in Observable and Flowable. - Plus  add the similar note to Emitter interface.  Resolves: #6299 - Add note in javadoc for all  distinctUntilChanged()  methods in  Flowable  and  Observable  class explaining about unexpected results to expect when using mutable data sources like **Mutable CharSequence** or **Lists**.  Resolves: #6290 As per [this](https://github.com/ReactiveX/RxJava/pull/6311#discussion_r234462497) discussion  change javadoc for  distinctUntilChanged()  method for Mutable List.,
1440,Samuel Tardieu,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, Allow use of the returned subscription to cancel periodic scheduling, The documentation for schedulePeriodically indicates that the returned subscription can be used to unsubscribe from the periodic action  or to unschedule it if it has not been scheduled yet. That was the case only before the first action took place  and it was then impossible to unsubscribe using the given subscription  although unsubscribing the worker did work.  This fixes #1344.,
1440,Dmitriy Zaitsev,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, 2.x: Fix exceptions in javaDoc 1.x: provide an explanation why certain tests are ignored 2.x: provide an explanation why certain tests are ignored, I ve corrected some javadocs for methods that check arguments using  ObjectHelper.requireNonNull(arg   message ) . It throws  NullPointerException  instead of  IllegalArgumentException   but as we know copy-pasting is an insidious thing.  ) During code reading I ve found some tests that are ignored but don t have a record why they are being ignored. Some of them have meaningful explanations present as line comments  so I decided to make them the parameters of  @Ignore  annotation  so it will be correct. The same as #4118  but for 2.x,
1440,Matt Laux,0.6667,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,1420 auto downloader should respect file pattern and propose correct filename,(https://cloudentcom/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5png),,0,0,0,0,1,1, 1.x: TestSubscriber::assertValuesAndClear should reset valueCount, During the time between calling  assertValuesAndClear  and providing the next  onNext  event  the  valueCount  is inconsistent with the size of the internal  values  list.,
3766,Sergio Garcia,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, Io Scheduler  Scheduled worker release. Io Scheduler  Scheduled worker release (v2.x), IoScheduler  releases the workers back to the pool to be reused optimistically to reduce the number of threads being created. This could lead to deadlocks in some situations like this one:      Flowable.just( item )         .observeOn(Schedulers.io())         .firstOrError()         .subscribe(__ -> {             for (int i = 0  i < 200  i++) {                 Completable.complete()                         .observeOn(Schedulers.io())                         .blockingAwait()              }             System.out.println( Will never reach this )          })      As discussed on https://github.com/ReactiveX/RxJava/issues/7153  this PR allow to configure this behaviour. Enabling  rx3.io-scheduled-release  will guarantee that workers are not reused until all the processing has finished.   Once we merge this we  I can create a similar PR for the  2.x  branch This is the same change as https://github.com/ReactiveX/RxJava/pull/7160 but targeting the 2.x branch Related to issue https://github.com/ReactiveX/RxJava/issues/7153,
3766,Eric Denman,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, Issue #1642 Fix null-emitting combineLatest Issue #1642 Fix null-emitting combineLatest, @benjchristensen Same as https://github.com/ReactiveX/RxJava/pull/1705 but for the 0.20.\* folks,
3766,Viacheslav Makarov,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, AppendOnlyLinkedArrayList#forEachWhile is not breaking iteration properly, AppendOnlyLinkedArrayList#forEachWhile(NonThrowingPredicate)  was  break -ing from inner loop instead of  return -ing when predicate returned  true .  This caused iteration to continue with items from the next array bucket.,
3766,Guillermo Calvo,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, Fix bug in CompositeException.getRootCause, I found what I believe is a bug in  CompositeException.getRootCause .  The [original code](https://github.com/ReactiveX/RxJava/commit/487a0ba52137e13d996ad12fc73bfeabb03c4fb7#diff-63dcdf1ecfc9f44d938e86154f465e41R306) use to be  if (root == null || root == e)   but apparently after some refactoring it ended up as  if (root == null || cause == root) .  As a side note  I think this method should be made  static  (that would have prevented the bug).  <!-- Thank you for contributing to RxJava. Before pressing the  Create Pull Request  button  please consider the following points:    - [ ] Please give a description about what and why you are contributing  even if it s trivial.    - [ ] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.    - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator  (if applicable) please make sure you have tests for working with an  empty    just    range  of values as well as an  error  source  with and/or without backpressure and see if unsubscription/cancellation propagates correctly. -->,
3766,Koji Lin,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, 2.x: make SingleMap not allow map function return null, Found code like below can works     Single.just( 1234 ).map(s -> null)               .subscribe(s -> {                   System.out.println(s)                })      Because Single#just not allow null  so prevent mapper return null.,
3766,Daniel Lew,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, throwIfFatal() now throws OnCompletedFailedException, Otherwise  if there s an error in onCompleted  the exception is swallowed and unreported.  Fixes #3885,
3766,Konstantin Mikheev,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, OnErrorFailedException fix, https://github.com/ReactiveX/RxJava/issues/2998,
3766,Abhishek,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, Updating SuppressUndeliverableRule to have a named inner class instead of an anonymous inner class, Based on the discussion in https://github.com/ReactiveX/RxJava/issues/7005  Resolves #7005,
3766,Mingtao Zhang,0.5,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update architecture tests to catch static imports,fixes a part of #2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| idea: there may be checkstyle rules that can be configured to cover our architecture tests || oh that was me fixed this instance in #2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake || further architecture related desirable tests are:- logic and viewmodel: no javafx except javafxcollections- view viewmodel and controller: no globals and jabrefgui no direct fxdialogservice- all fxml files can be loaded successfully- no fetcher is used directly outside of the import package || there is a new tool called archunit maybe this is helpful https://githubcom/tng/archunit,0,0,0,0,1,0, Tiny integration test change, It s a tiny change.  I ve been following this project for a while as a hobby  also want to contribute to it.   Currently I am going through test cases to learn. Found some tiny problems as we are testing  concat   we should care not only the total number of elements  but also the sequences.  Creating this request mainly want to make sure I am writing/commiting code to the correct place.  Let me know if there is any problem.  Best Regards  Mingtao,
925,Jan Knotek,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, Null check for BufferExactBoundedObserver, - [*] Please give a description about what and why you are contributing  even if it s trivial:  **Improve stability of the library.** Other variants of the onComplete method include this Null check already  e.g. BufferExactUnboundedObserver  this check should fix the case when there is a race condition and buffer is already set to  null  by the time onComplete is called.  It is causing 0.1% crashes in our production app  this should improve stability of other apps too.,
925,Mathieu Gabriel,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, Fix FlowableOnBackpressureBufferStrategy FlowableWithLatestFrom forgets request, Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy Fix drop strategy logic in FlowableOnBackpressureBufferStrategy Add unit test for FlowableOnBackpressureBufferStrategy  copied from FlowableOnBackpressureBufferTest  there is still some work needed to have a better coverage The following scenario did not work with FlowableWithLatestFrom: Flowable<?> result = source.combineWithLatest(other  someCombiner) - client subscribe to the result stream - source stream emits - other stream emits - source stream emits  expected result: result stream emits the combined event actual result: result stream does not emit anything,
925,Zach Klippenstein,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, 1.x: Add Completable.doOnCompleted and deprecate Completable.doOnComplete, Closes #3700.,
925,Volkan Yazıcı,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, Wrap InterruptedException with an unchecked exception in TestSubscriber#awaitValueCount()., In its current form   awaitValueCount()  is the only  TestSubscriber#await* method that throws a checked exception (that is   InterruptedException )  whereas the others wrap it with a  IllegalStateException . This spreads a try-catch disease throughout the entire code base where  awaitValueCount()  is used. One can argue that why not just declaring the exception in the caller method footprint: Because you might be implementing an interface (e.g.  Runnable ) which does not allow any exceptions in its footprint. This patch wraps the  InterruptedException  with an unchecked exception in  TestSubscriber#awaitValueCount() .,
925,Björn Quentin,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, Use JUnit s assert format for assert messages to enable better suppor…, This changes the message format of  assert  to match that of JUnit. This way IDEs like IntelliJ IDEA are able to parse it and offer functionality like  compare values .,
925,Yasuhiro SHIMIZU,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, 1.x: add unsubscribeOn to Single type (#5138), resolve #5138   add unsubscribeOn to Single type.,
925,PunitD,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, 2.x: explain null observer/subscriber error reports in detail from RxJavaPlugins Javadoc : Explain explicitly about using Emitter interface methods synchronously Javadoc: explain that distinctUntilChanged requires non-mutating data to work as expected Change javadoc explanation for Mutable List, This PR is related to issue [#6172](https://github.com/ReactiveX/RxJava/issues/6172). With these changes  all reactive types will emit detailed error message when  onSubscribe  hook installed using RxJavaPlugins returns null  observer/subscriber :  **Observable** >  The RxJavaPlugins.onSubscribe hook returned a null Observer. Please check the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins   **Flowable** > The RxJavaPlugins.onSubscribe hook returned a null FlowableSubscriber. Please check the handler provided to RxJavaPlugins.setOnFlowableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins  **Single** > The RxJavaPlugins.onSubscribe hook returned a null SingleObserver. Please check the handler provided to RxJavaPlugins.setOnSingleSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins  **Maybe** > The RxJavaPlugins.onSubscribe hook returned a null MaybeObserver. Please check the handler provided to RxJavaPlugins.setOnMaybeSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins  **Completable** > The RxJavaPlugins.onSubscribe hook returned a null CompletableObserver. Please check the handler provided to RxJavaPlugins.setOnCompletableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins   **Note :**  There was no null check on  observer  returned from  RxJavaPlugins.onSubscribe(this  observer)  method call in  Completable  s subscribe() method.  So  I ve added it in this PR. Is that fine? Add note in Javadoc explicitly explaining about using Emitter interface methods synchronously.  - Add notes for  generate  methods in Observable and Flowable. - Plus  add the similar note to Emitter interface.  Resolves: #6299 - Add note in javadoc for all  distinctUntilChanged()  methods in  Flowable  and  Observable  class explaining about unexpected results to expect when using mutable data sources like **Mutable CharSequence** or **Lists**.  Resolves: #6290 As per [this](https://github.com/ReactiveX/RxJava/pull/6311#discussion_r234462497) discussion  change javadoc for  distinctUntilChanged()  method for Mutable List.,
925,Samuel Tardieu,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, Allow use of the returned subscription to cancel periodic scheduling, The documentation for schedulePeriodically indicates that the returned subscription can be used to unsubscribe from the periodic action  or to unschedule it if it has not been scheduled yet. That was the case only before the first action took place  and it was then impossible to unsubscribe using the given subscription  although unsubscribing the worker did work.  This fixes #1344.,
925,Dmitriy Zaitsev,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, 2.x: Fix exceptions in javaDoc 1.x: provide an explanation why certain tests are ignored 2.x: provide an explanation why certain tests are ignored, I ve corrected some javadocs for methods that check arguments using  ObjectHelper.requireNonNull(arg   message ) . It throws  NullPointerException  instead of  IllegalArgumentException   but as we know copy-pasting is an insidious thing.  ) During code reading I ve found some tests that are ignored but don t have a record why they are being ignored. Some of them have meaningful explanations present as line comments  so I decided to make them the parameters of  @Ignore  annotation  so it will be correct. The same as #4118  but for 2.x,
925,Matt Laux,0.5,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,add tests for metadata parsing,this solves #707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata() in fact can be replaced by these new methods i think this is something for a new prone question: to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters?,|| seems like this issue has already been fixed 8 months ago high time for closing,0,0,0,0,1,1, 1.x: TestSubscriber::assertValuesAndClear should reset valueCount, During the time between calling  assertValuesAndClear  and providing the next  onNext  event  the  valueCount  is inconsistent with the size of the internal  values  list.,
1168,Niklas Baudy,0.3,=,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1163 by removing the strange functionality which enabled sorting‚Ä¶,we have some very strange logic in jabref which allows to handle years using only the two last numbers so we can detect that 68 means 1968 this causes a lot of issues i do not think that jabref should still support such strange logic and just use the value which is in the year field hence i removed it this also solves the issue of having that yearutil in the model package which duplicated a method in the stringutil class refs #1163,,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
5454,Niklas Baudy,0.25,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| @tobiasdiez im working on this,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
5454,Niklas Baudy,0.25,=,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,fix highlight issues for lists,5277 and fixes #5035 the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| jabref 50-devlinux 500-27-generic amd64 java 180_222cannot reproduce the behaviour mentioned above i reckon this has now been fixed with  (?) || i will start investigations on this || jabref 50-devlinux 500-27-generic amd64 java 1104ok i can now reproduce this behaviour with the current snap version on the --edge channel this indicates that this issue was introduced somewhere between the release of the current snap version (or rather the one from 9th september) on the --beta channel and the current snap version on the --edge channel || @cyraxsector  you can try to narrow down the bug a git bisect: || cannot reproduce the behavior mentioned above can you please provide more information || jabref 50-dev--snapshot--2019-09-26--master--1a6c92c79windows 10 100 amd64 java 1104-bellsofti can still reproduce this behaviour you can force it to happen by scrolling with the mouse wheel in the fetcher sidepane and then switching back to just scrolling with the mouseif you just scroll with the mouse (without using the mouse wheel) you will sometimes encounter the issue and sometimes not but by using the mouse wheel scrolling first and then the mouse scrolling itself afterwards the issue always appears || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || jabref 500-dev--2019-10-18----bc26c3ac5windows 10 100 amd64 java 1202i can confirm that this has been fixed in the current dev version,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
1981,Niklas Baudy,0.2222,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,icon does not change when toggling global search,issue: #1979,,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
4822,Niklas Baudy,0.2,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,convert autolinkfilesaction to javafx,4819also convert a few other message boxes to javafx        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
4999,Niklas Baudy,0.2,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,fix iee fetcher,4997 add exception dialog on import failcheck if we have keywords field present in json        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks for your report! this was indeed a bug in the ieee fetcher in addtion if any fetcher throws an error it will be displayed in a dialog nowwe would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
4604,Niklas Baudy,0.2,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,enable default cursor for new entry,4600sets text field on focus at the end of initialization by running the javafx thread-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks to @chelseyong this is now implemented in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
1944,Niklas Baudy,0.2,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,try around with xmlunit,   -->see #1943 for details -  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
3709,Niklas Baudy,0.2,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,group separator escaping,3646,|| duplicate of #365,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
3904,Zac Sweers,0.1429,=,,,,,,,,,,,,,,,,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
1192,Zac Sweers,0.1429,=,1.0,0.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,preview panel is now updated when an entry is cut/deleted (again),when i fixed #936 some time ago (pr: #937) i made a tiny errorthe issue was to hide the preview panel when deleting/cutting an entry but it also hid it when aborting the delete-confirmation-dialogi too refactored both actions a little to make it easier for future changesi also removed in `undoableremoveentry` and `undoableinsertentry` the id generation,|| nice video :smile: for reproducing the issue!,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
3551,Zac Sweers,0.1429,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,make path relative when adding automatically found file,3476   -->-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| hirelative links are created automatically and this depends on your settings there are 4 settings for files:1 checkbox: use bibfile as main file location -> overwrites all other settings2 main file directory globally in jabref valid for all files3 use and library setting in the properties of the bib file: here you can also enter relative pathso depending on your settings jabref will relatvize all paths against the first found file directory || hiall of these 3 were set in jabref 40 and are still set in the development version im using now (1 checked 2 set to `/home/bitzer/papers` and 3 set to `/home/bitzer/papers` too) still version 40 added relative paths while the development version adds absolute paths || is the location of the bibfile the same as /home/bitzer/papers? if not then uncheck the combobox || yes the bibfile is in /home/bitzer/papers itself also the issue persists in the newest version jabref-41-dev--snapshot--2017-12-08--master--6f39151a7jar || ah i now can reproduce your  behavior it is the auto link which adds it as absolute path if you manually select the file it is correct i will be working on a fix for this || cool thank you!,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
4245,Zac Sweers,0.1429,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix style issues in about dialog,        ( (      because github does not support autolinking there -->4202 and a few other small style related issues i also created a little new app that make it simple to test the display of javafx controls as of now i only added a lot of buttons in different styles and states:( merge instead of squashing the commits-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| confirmed under windows 10 latest master the window is too small to show the buttons at bottom and you cant resize them( || i digged a bit into this must be related to some binding the change of our dialog layout stuff under the hood the information for authors etc is correctly filled in the variables - so its not the problemin contrast to other dialogs the binding are directly defined in the fxml,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
1487,Zac Sweers,0.1429,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,implement getextension and getdescription for importers,implement getextension and getdescription for importers #1444 -  change in changelogmd described-  ,|| should be fixed by #1487 isnt it?,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
2211,Zac Sweers,0.1429,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,prevent the search to get focus when deleting/pasting an entry,fixes: #2208when you delete an entry the focus will no longer jump to the searchbar instead it will select the next entry (also counts for pasting),|| @bartsch-dev could you have a look? üòá,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
4964,Zac Sweers,0.1429,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,remove ui threadlist for maintable as it prevents sorting in maintable,4886renenables sortingtried a bit around and could not find any side issue so far        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| thanks for the report that is definitely a regression bug it was working fine a few versions ago if i remember correctlyedit// confirmed on windows 10 with 47f43ca63616f04bfa780c9a8d83143d919d1f80 tjabref 50-devwindows 10 100 amd64 java 180_202 || @tobiasdiez  i found the issue: in the maintable if i remove the bindings wrapper it works again``` thissetitems(bindingshelperforui(modelgetentriesfilteredandsorted()))        // enable sorting        modelgetentriesfilteredandsorted()comparatorproperty()bind(thiscomparatorproperty())``` || the issue is not solved in the latest snapshot of today (`2019-05-06 c168c4978`) || @siedlerchr @tobiasdiez what is the problem with this why is the correction not yet applied? it renders my working with jabref very difficult the version snapshot--2019-05-10--master--751c5b5e7 does not have sorting back || please be patient!  we understand that this is an important issue as long as the issue is not closed its not fixed no need to constantly question it  come on you know the ruleswhile the fix looks simple it might have other consequences which we need to check but i will look at it in detail now || should be fixe now in the latest master 3baa6bd we would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version || great it works! thanks,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
4258,Zac Sweers,0.1429,=,,,,,,,,,,,,,,,,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
1888,Zac Sweers,0.1429,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,do not mark a new database as changed,1881  i missed an if-statement when inverting an if/else in #1830 - ~~ change in changelogmd described~~ - introduced in development version only (fortunately)-  manually tested changed features in running jabref,|| this is already the case? _file_ -> _new database_ *- do nothing - *_file_ -> _close database_no message is shown || not in my development version just noticed it so i think it is something quite recent || i can confirm this behaviour in the dev version on windows to || my bad ill add a pr fixing this in a minute,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
1443,Zac Sweers,0.1429,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,651: improve parsing of author names containing braces,651-  change in changelogmd described-  -   (),|| yeapi remove all the latex stuf and opened ok (the eof error persist) || one should probably use the bibtex-vm-based name formatters || note that the above is a bad example since the correct way to write the acute accent is `\{e}` and `h\{e}l\grave{e}ne fiaux` is correctly written as `fiaux h`however `h{e}lene fiaux` results in the unexpected `fiaux he` || i propose to close this as it is only a very minor bug which only occurs in very special circumstances with bad input any objections @jabref/developers ?,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
2995,Niklas Baudy,0.125,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,less backups,addresses #2993the frequent events are due to the bidirectional binding which transfers every change directly into the bibentry if we want fewer events the only solution will probably be to break the binding which would be very disappointing for the javafx implementation in my point of view the problem is not on the side of event creation after all every change should trigger an event and javafx triggers many changes imho this should be fixed in how we react to eventsi also noticed the exception but do not get a dialog this seems to happen because of the save operation invoked by the backupa solution might be to do less backups by: 1 doing backups only every x events and not for every event 2 ignoring fieldchangeevents in the backup 3 adding the size of the field change in the fieldchangeevent class so that you can ignore it if only 1 character changedthis pr combines options 1 and 3 ie: the backup manager ignores events that are very minor and only does a backup if enough of them have happened (currently set to five)what do you think?-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| fixed by #2995,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
1041,Niklas Baudy,0.125,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,write database type in lower case into the bib file,this finally 963 a quick fix has been introduced in 661eea007e555 but that does not cover the lower case writing of the type```@comment{jabref-meta: database_type:bibtex}```finally gets```@comment{jabref-meta: databasetype:bibtex}```-  change in changelogmd described -> this has been introduced in the development versions after the last release thus no entry required-   -> tests have been adapted to match this new implementation,|| you keep `bibtex` and `biblatex` (instead of `bibtex` and `biblatex`) because of  :innocent:,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
5048,Niklas Baudy,0.125,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,preserve encoding while copy and pasting in maintable,5043encodes and decodes data with utf-8,|| first tests show that copying is fine but pasting alters the encoding via a bibtex parser || i can still reproduce the problem with today `jabref_windows-x64_5_0-dev--snapshot--2019-06-16--master--8d99db113` || the pr is not merged yet you can try the branch version if you like  || it is fixed thanks a lot!**edit**: but wait there is another bug maybe related to this issue here i will test and report**edit2**: the bug #5069 is not related to this issue can be closed if merged || merged this now into master so will be avaiable in a couple of minutes in the master version,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
5472,Niklas Baudy,0.125,=,1.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fix highlight problem in entry preview,5069 by using markjs        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?),|| issues is from the search highlighting of the search term when you stop searching its back to normal  || the highlighting is handled by this simple javascript code: || i know nothing about jswhat does your last post mean? it is easy to fix or the opposite? || i have tried if this issue still remains in the master branch and not only does it lose formatting it also jumps to the author field automatically so i am rewriting my author after search finds a resultthe formatting goes back to normal when i click to other article not after finishing search as @siedlerchr saidi would like to look at this issue and fix it || the problem is probably that we read the inner text (ie everything without formatting) and then set it as the inner html should work if `documentbodyinnertext` is replaced by `documentbodyinnerhtml` || @tobiasdiez  it is not that easy thats what i did before the problem is then that it displays and searches matches in html tags  || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || confirmed it is fixed and working for methanks a lot,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
2114,Zac Sweers,0.125,=,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,ctrl-s parsing error message,2109 ctrl-s doesnt trigger parsing error messageproblem: conflict of local shortcut (of the entry editor) with the global shortcutsolution: local shortcut removed (the action assigned to local and global shortcut is essentially the same (save database))-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,,0,1,1,0,1,1, Switch Maybe and Single to use their Transformers in compose() Upcast ConcurrentHashMap to Map to avoid compatibility issue Add takeUntil support in Single Add Schedulers.reset() for better testing Improve compose() generics 2.x: Add scheduler creation factories Implement LambdaConsumerIntrospection 2.x: Implement as() Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe, Resolves #4650 Resovles #4653  See http://stackoverflow.com/a/32955708/61158 As discussed in #3708  This adds  takeUntil(Observable)  and  takeUntil(Single)  support in  Single . It was mostly just adapting the logic from the existing  OperatorTakeUntil  and adjusting it for accepting a  Single  and sending a  CancelattionException  in the event of a submission from  other  prior to a terminal event in the source  Single .  Any feedback is appreciated it  this is my first time contributing an implementation to this project. Particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. Also particularly looking for feedback on what information to include in the  CancellationException . Resolves #3985  This adds a  reset()  method to  Schedulers   with the main benefit being improved testing support. This does slightly tweak the internal API of  Schedulers  to use a  getInstance()  approach to allow lazy init. This way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. Otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  Schedulers.reset() .  Will run perf tests overnight in case  I m not sure how much of a tradeoff moving to an internal  getInstance()  approach costs  if anything.  CC @zsxwing Resolves #4950  I tested and built with the added tests on Java 6  7  and 8. Not sure if you want to keep them in before merging since they re not really functional in nature  just there to make sure they compile. Resolves #4993  This is a pretty vanilla copy from RxJava 1 s implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.  We had talked about borrowing from project reactor s APIs for different overloads  let me know if you think we should add more fine-grained controls through these. Followup from #5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one. This implement  as()  support as discussed in #5654  I took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of  to() )  Related: #5654 Happened to notice these today,
1318,Niklas Baudy,0.125,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,update localization instructions,corrected gradlew task name#1312@koppor  @stefan-kolb,|| in my other pr  #1265   already changed the error/info text output of the consistencytest  output to the new gradle task name edit// linked wrong pr || @siedlerchr wrong pr referenced?,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
4549,Niklas Baudy,0.1111,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,fixes that renaming a group did not change the group name in the interface,3189,|| when you close and expand the group the change should also be visible no idea though why it is not visible immediately the same issue occurs if you assign an icon or color to the group || might be related to this: || these bug still exists i will work on it || when i press edit group that show `orgjabrefmodelgroupsabstractgroup#name` instead of `orgjabrefguigroupsgroupnodeviewmodel#displayname` why? whats the difference between them? || the `displayname` is a formatted version of `name` for example if `name` contains latex commands like `hell\{o}` then `displayname` is the unicode version `hell√≥` || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || can confirm this has been fixed in:jabref 50-dev--snapshot--2019-01-05--master--d281ece4bwindows 10 100 amd64 java 180_191,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
4780,Niklas Baudy,0.1111,=,,,,,,,,,,,,,,,,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
3931,Niklas Baudy,0.1111,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,3929 correct fetcher messages,3929,,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
3325,Niklas Baudy,0.1111,=,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,3292: annotations are now automatically refreshed,   -->this pr aims to 3292 by removing the refresh button completely and monitoring the pdf files automatically for changes in the progress of the implementation a few refactorings were made:- extract the file monitoring functionality from `fileupdatemonitor` to a new class and convert the timestamp-based method to the new nio watcher interface- extract the conflict handling code by external bib file changes from the base panel to a new class `databasechangemonitor` where also some of the old code from `fileupdatemonitor` now finds a new home this class is still a bit ugly but in my opinion better than before i hope that the conflict handling still works as expected i tested it but might have missed some special cases/configurations------  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
2614,Niklas Baudy,0.1111,=,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,cleanup window has a scrollbar now,fix for issue #2501-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?,|| i tried to fix the layout stuff in #2415 i could not really test it so i would ask you to test that version  as soon as the tests run through  || no resize for cleanup window using ````jabref-400-dev--snapshot--2017-02-03--movefiledir--07a1c4477jar```` || this has been fixed with #2614 - and is now included in the dev builds,1,1,1,1,1,1, 2.x: Remove unused methods in BasicFuseableObserver 2.x: Fix javadoc for Single.flatMapObservable 2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources 2.x: Test static from methods and add Maybe.fromSingle & fromCompletable 2.x: Add Observable.rangeLong & Flowable.rangeLong 2.x: BaseTestConsumer add assertValueAt(index  Predicate<T>) 2.x: CompositeException fix order of Exceptions 2.x: Clean up null usages by using ObjectHelper.requireNonNull 2.x: Fix Flowable.elementAt on empty sources. Plus sync tests 2.x: Distinct Operator - delegate null Collection down to onError 2.x: Delegate null Collections down to onError in toList Remove double whitespace in if conditions Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions 2.x: Remove some unused fields 2.x: Add Single.fromObservable(ObservableSource) 1.x: Deprecate CompositeException constructor with message prefix Add Completable.andThen(Completable)  deprecate endWith() Add CheckReturnValue annotation 2.x: Fix typo in DisposableHelper 2.x: Change Completable to CompletableSource 2.x: Add @CheckReturnValue to create methods of Subjects + Processors 2.x: Add Completable.hide() 1.x: Test all private Constructors 1.x: Single.flatMapCompletable 1.x: Fix some typos 1.x: Fix typo eigth to eighth 3.x: Remove vararg overloads for combineLatest in Observable + Flowable 1.x: Make Observable takeUntil documentation more explicit 3.x: Rename combineLatest methods that take an array to combineLatestArray 2.x: Observable.range fix Exception message 2.x: Rename Single Base Interface Types for consistency 2.x: Rename Flowable Base Interface Types for consistency 2.x: Rename Observable Base Interface Types for consistency 2.x: Rename ObservableSource to ObservableWithUpstream 2.x: Rename Completable Base Interface Types for consistency 2.x: Add missing license headers 2.x: Remove unused exceptions in public API 2.x: Fix some typos in Flowable + Observer documentation 2.x: Observable + Flowable fix some typos 2.x: Single.test cancel TestSubscriber when wanted 2.x: Completable.test cancel TestSubscriber when wanted 1.x: Sync doOnEach java doc 2.x: Add a few more @Nullable & @NonNull annotations to public interfaces 1.x: Completable add doOnEach 1.x: Single add doOnEach 1.x: Deprecate Notification.createOnCompleted 2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation. 2.x: Add doOnEvent to Single & Completable 2.x: Completable enhance doOnEvent to reduce allocations 2.x: Remove trailing whitespace 2.x: Add assertValuesOnly to BaseTestConsumer. 1.x: Remove trailing whitespace 2.x: Add Disposable Observer for Maybe  Completable & Single 2.x: Add exception message in SingleFromCallable 2.x: Adjust some JavaDoc in Emitters 2.x: Add missing Resource Observer for Maybe  Completable & Single and adjust some Javadoc 2.x: Add retry(times  predicate) to Single & Completable and verify behavior across them and Maybe. 2.x: Fix Generics T[] in Zip & CombineLatest 2.x: More usage of ObjectHelper 2.x: Remove unused declarations 2.x: Fix MaybeTimber by using scheduler and unit 2.x: PublishSubject enhance NPE when onNext(null) is called 2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases 2.x: Add public constructor for TestScheduler that takes the time. 2.x: Fix typo in Single + Maybe defer() 2.x: Enhance NPE message in Create functions of all Base Reactive Types 2.x: Allow @SchedulerSupport on constructors. 2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber 2.x: Remove some dead code 2.x: Add missing Maybe tests for concatWith & onErrorResumeNext 2.x: Add singleOrError  firstOrError  lastOrError & elementAtOrError to Observable and Flowable 2.x: Report errors from onError to Plugin when done 2.x: UnicastSubject fix onTerminate 2.x: Enhance NPE messages 2.x: Remove takeFirst(predicate) in Observable & Flowable 2.x: Add missing @Test annotation on tests 2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases 2.x: RxJavaPlugins - Don t pass null throwable down to Error Handler 2.x: Verify same onNext / onError null behavior across all Subjects and Processors 2.x: TestSubscriber & TestObserver add assertValue(Predicate) 2.x: Add Maybe.flatMapSingle 2.x: Add Completable.andThen(MaybeSource) 2.x: Add Single.flatMapMaybe 2.x: Clean up SingleFlatMap, nan - wrong return type was described - some git merging information was added This will fix #4680 - elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError() - elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete() - I also noticed that elementAt() with a default value on an empty source did not work either. - add Maybe.fromSingle by reusing MaybeFromSingle - add Maybe.fromCompletable by resuing MaybeFromCompletable - remove anonymous classes in various operators - add tests for   - Completable.fromAction()   - Completable.fromCallable()   - Completable.fromObservable()   - Completable.fromPublisher()   - Completable.fromRunnable()   - Completable.fromSingle()   - Maybe.fromAction()   - Maybe.fromCallable()   - Maybe.fromCompletable()   - Maybe.fromRunnable()   - Maybe.fromSingle()   - Single.fromCallable() Will fix #4683 - adds Observable.rangeLong() - adds Flowable.rangeLong()  both implementations are copied same for the unit tests.  What should we do about the range overflow check? We could use BigDecimal to check that. Fixes #4688 - adds assertValueAt(index  Predicate) to BaseTestConsumer After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException. Instead of using an if statement to check for  null    ObjectHelper.requireNonNull  will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError d.  In addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong. - fixes Flowable.elementAt on an empty source  - sync tests between Observable & Flowable elementAt - returning null as a Collection in the callable didn t go to onError - adopted flowable & observable - if null from a collection supplier is returned delegate to onError - adapted Flowable & Observable - unified exception message Just found them while walking through the source code trying to get a better overview of the Rx internals. Advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen. Remove some unused fields that are either - present in their parent class - not set - adds an overload to create a Single from an ObservableSource Before this PR messagePrefix was never used :dancer:   If you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it  be nicer.  About the message is there any reason for having a space after the dot? See #3947 First draft on this.  So far I have only annotated  subscribeWith()  and  test()  methods.  I checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.  How do you feel if I extend  BaseTypeAnnotations  to test for  @CheckReturnValue  too?  Related #4878 Fixed a typo in DisposableHelper.  curren  ->  current Changing  Completable  to  CompletableSource . Also found one other wrong spot that I fixed within this PR.  Fixes #4923 - adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too - adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden nan Addresses #4216   Happy to receive feedback on the implementation. Also should I take the documentation from  flatMapObservable  and adjust it? nan Found another one Started removing the vararg function from #6634 nan Renames the methods as suggested nan Addresses #4044 Addresses #4044 Addresses #4044. To unblock #4300 Addresses #4044 Now every file has a license header. As wanted in #4306 nan nan nan nan The other  doOnEach  function has the right java doc. Terminal events such as  onCompleted  /  onError  are also included in  doOnEach . - adds the @Nullable & @NonNull annotations to   - Emitters   - Observer   - OnSubscribe   - Operator   - Source   - Transformer  for Observable  Maybe  Single  Completable & Flowable. First part of #4457   Is it okay that I reused Notification like that?  Also are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6  as my default seems to be Java 8 and I don t get any errors shown in the IDE. Really not that happy with  onNotification.call(Notification.<T>createOnNext(t))   do you guys have any other way of doing this? There s no way of creating a Notification that has the  onCompleted  plus a value. A new one could be introduced there though. Also the  doOnEachSuccess  test feels clunky.  Also why does Single when using the  do  methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.  Javadoc will follow once we sorted out the few nits here.  Fixes #4457 Fix #4462   It might just as well shine some light into which method should be used and explain why there are 2 - changes  ObservableSource.defer  to  Observable.defer() nan nan Removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    I think it s best to review this locally or by appending  ?w=1  to this URL to let GitHub ignore white space changes. Adds  assertValuesOnly  that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.  Fixes #5555 Dunno whether this is wanted or not in 1.x. If not just close this PR. Also any reason the Dispoable is called  s ? Is it still from the Subscription time?  Fixes #4501 nan nan Fixes #4517 - Add retry(times  predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now - verify behavior across the three reactive types  Happy to get better testing names Fixes #4524  Test for combineLatest fill follow nan nan Also one question why does  CompletableTimer  check  if (!sd.isDisposed()) {  before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn t add the check there either.  However I feel like this should be consistent  can you elaborate which one is wanted? nan setCancellable  was not tested before. - adds a time constructor to TestScheduler - should I make it experimental or will it just be stable?  Fixes #5901 nan nan Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I d want to slam  @SchedulerSupport  on it so it can be handled properly by static analysis as well. This basically copies the behavior of  assertValuesOnly  to the  assertValueSet  and  assertValueSequence  equivalent methods.  Coped the tests exactly from  assertValuesOnly  and adjusted them with the new added methods. Also what about IntFunction it s right now in the public API however not used. So the question is does Rx want to expose that interface? They had no tests previously Closes #4588 For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn t really find tests testing that errors are propagated through the Plugin API. nan Now all NPE thrown internally are having this standard message nan nan nan nan nan nan Gave that implementation a try. Feedback is welcome I think there are improvements that can be done. nan nan nan,
