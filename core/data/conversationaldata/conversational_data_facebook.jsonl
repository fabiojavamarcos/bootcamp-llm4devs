{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfix for 2218 reenable ads fetcher\nsee 2218fetcher is now working again change in changelogmd described affected search based fetcher still unreleased tests created for changes pass again manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate\npotential quickfix user agent maybe you can go ahead and try not from my smartphone wink\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.75}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nless backups\naddresses 2993the frequent events are due to the bidirectional binding which transfers every change directly into the bibentry if we want fewer events the only solution will probably be to break the binding which would be very disappointing for the javafx implementation in my point of view the problem is not on the side of event creation after all every change should trigger an event and javafx triggers many changes imho this should be fixed in how we react to eventsi also noticed the exception but do not get a dialog this seems to happen because of the save operation invoked by the backupa solution might be to do less backups by 1 doing backups only every x events and not for every event 2 ignoring fieldchangeevents in the backup 3 adding the size of the field change in the fieldchangeevent class so that you can ignore it if only 1 character changedthis pr combines options 1 and 3 ie the backup manager ignores events that are very minor and only does a backup if enough of them have happened currently set to fivewhat do you think change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate\nfixed by 2995\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.75}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nimplement getextension and getdescription for importers\nimplement getextension and getdescription for importers 1444 change in changelogmd described\nshould be fixed by 1487 isnt it\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nconvert autolinkfilesaction to javafx\n4819also convert a few other message boxes to javafx because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg\nnan\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\n1420 auto downloader should respect file pattern and propose correct filename\n\nnan\nadd multisentence title formatting to sentence case and title case add cleanup for copying over physcial review article id as the page n… add selection copy to preview window simplify biblatex entry type form\nfixes added support for multiplesentence title formatting for the sentence case and title case options by using a regular expression to first split the input into sentences and afterwards processing those sentences individually a regex might not be the best choice for natural language processing but since most titles are only 1 sentence long the proposed regex should cover the vast majority of cases also added additional test cases for sentence case and title case formatting the old tests are assuming one sentence titles but are still applicable change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at change in changelogmd described if applicable tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository fixes 6962 added a feature that allows users to copy highlighted text in the preview window screenshot x change in changelogmd described if applicable tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository fixes 6730 related pr 7485 this is a followup pr that simplifies the select entry type form in biblatex mode screenshots entryformnonexpand expanded entryformexpand x change in changelogmd described in a way that is understandable for the average user if applicable tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.3}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nctrls parsing error message\n2109 ctrls doesnt trigger parsing error messageproblem conflict of local shortcut of the entry editor with the global shortcutsolution local shortcut removed the action assigned to local and global shortcut is essentially the same save database change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate\nnan\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.8333}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nenable default cursor for new entry\n4600sets text field on focus at the end of initialization by running the javafx thread change in changelogmd described manually tested changed features in running jabref helpjabreforg\nthanks to chelseyong this is now implemented in the latest development version could you please check the build from thanks please remember to make a backup of your library before tryingout this version\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nremove ui threadlist for maintable as it prevents sorting in maintable\n4886renenables sortingtried a bit around and could not find any side issue so far because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg\nthanks for the report that is definitely a regression bug it was working fine a few versions ago if i remember correctlyedit confirmed on windows 10 with tjabref 50devwindows 10 100 amd64 java 180202 tobiasdiez i found the issue in the maintable if i remove the bindings wrapper it works again enable sorting the issue is not solved in the latest snapshot of today 20190506 c168c4978 siedlerchr tobiasdiez what is the problem with this why is the correction not yet applied it renders my working with jabref very difficult the version does not have sorting back please be patient we understand that this is an important issue as long as the issue is not closed its not fixed no need to constantly question it come on you know the ruleswhile the fix looks simple it might have other consequences which we need to check but i will look at it in detail now should be fixe now in the latest master 3baa6bd we would like to ask you to use a development build from and report back if it works for you please remember to make a backup of your library before tryingout this version great it works thanks\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nnan\nnan\nnan\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\ncleanup window has a scrollbar now\nfix for issue 2501 change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate\ni tried to fix the layout stuff in 2415 i could not really test it so i would ask you to test that version as soon as the tests run through no resize for cleanup window using this has been fixed with 2614 and is now included in the dev builds\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 1.0}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nadd throttle to autosaveuimanager\nas discussed in 5679 there are a lot of save actions performed when autosave is turned on this pr adds a timer which limits the save actions to one in 200ms which is especially handy when automated tasks like find and replace are performed change in changelogmd described if applicable\nnan\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.25}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfix double paste on different os\n4845 fixes 4699 fixes 4836 upon pasting macos calls the system paste as well as this caused a duplicate call of the paste\ncannot confirm under windows please try java 8u202 as there have been several bug fixes for mac it still persists with latest 18u202 oracle jdk addon if an entry is pasted into the maintable it is also pasted twice reproduced this bug start to work on it thanks to linusdietz and stefankolb this issue is now fixed in the latest master\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.5}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\ngroup separator escaping\n3646\nduplicate of 365\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\npreview panel is now updated when an entry is cutdeleted again\nwhen i fixed 936 some time ago pr 937 i made a tiny errorthe issue was to hide the preview panel when deletingcutting an entry but it also hid it when aborting the too refactored both actions a little to make it easier for future changesi also removed in undoableremoveentry and undoableinsertentry the id generation\nnice video smile for reproducing the issue\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfix highlight problem in entry preview\n5069 by using markjs because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg\nissues is from the search highlighting of the search term when you stop searching its back to normal the highlighting is handled by this simple javascript code i know nothing about jswhat does your last post mean it is easy to fix or the opposite i have tried if this issue still remains in the master branch and not only does it lose formatting it also jumps to the author field automatically so i am rewriting my author after search finds a resultthe formatting goes back to normal when i click to other article not after finishing search as siedlerchr saidi would like to look at this issue and fix it the problem is probably that we read the inner text ie everything without formatting and then set it as the inner html should work if is replaced by tobiasdiez it is not that easy thats what i did before the problem is then that it displays and searches matches in html tags this should be fixed in the latest development version could you please check the build from thanks please remember to make a backup of your library before tryingout this version confirmed it is fixed and working for methanks a lot\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.75}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfix iee fetcher\n4997 add exception dialog on import failcheck if we have keywords field present in json because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg\nthanks for your report this was indeed a bug in the ieee fetcher in addtion if any fetcher throws an error it will be displayed in a dialog nowwe would like to ask you to use a development build from and report back if it works for you please remember to make a backup of your library before tryingout this version\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\n651 improve parsing of author names containing braces\n651 change in changelogmd described\nyeapi remove all the latex stuf and opened ok the eof error persist one should probably use the bibtexvmbased name formatters note that the above is a bad example since the correct way to write the acute accent is e and helgraveene fiaux is correctly written as fiaux hhowever helene fiaux results in the unexpected fiaux he i propose to close this as it is only a very minor bug which only occurs in very special circumstances with bad input any objections jabrefdevelopers\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfix style issues in about dialog\nbecause github does not support autolinking there 4202 and a few other small style related issues i also created a little new app that make it simple to test the display of javafx controls as of now i only added a lot of buttons in different styles and states merge instead of squashing the commits change in changelogmd described manually tested changed features in running jabref helpjabreforg\nconfirmed under windows 10 latest master the window is too small to show the buttons at bottom and you cant resize them i digged a bit into this must be related to some binding the change of our dialog layout stuff under the hood the information for authors etc is correctly filled in the variables so its not the problemin contrast to other dialogs the binding are directly defined in the fxml\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nadd tests for metadata parsing\nthis solves 707 and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata in fact can be replaced by these new methods i think this is something for a new prone question to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters\nseems like this issue has already been fixed 8 months ago high time for closing\nfixed validation before typing in new entry dialog 7020 add ability to insert arxivid optimize saving\ndo not show an error message if there is no error fixes 7020 2292 pasted arxivid creates new bibentry x change in changelogmd described in a way that is understandable for the average user if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes x checked documentation is the information available and up to date if not created an issue at x change in changelogmd described in a way that is understandable for the average user if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.4}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\npreview panel is now updated when an entry is cutdeleted\n936when an entry is cutdeleted the preview panel will be hidden due to the fact that no entry is selected anymore change in changelogmd described\nnice video smile for reproducing the issue\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.75}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\n3292 annotations are now automatically refreshed\nthis pr aims to 3292 by removing the refresh button completely and monitoring the pdf files automatically for changes in the progress of the implementation a few refactorings were made extract the file monitoring functionality from fileupdatemonitor to a new class and convert the timestampbased method to the new nio watcher interface extract the conflict handling code by external bib file changes from the base panel to a new class where also some of the old code from fileupdatemonitor now finds a new home this class is still a bit ugly but in my opinion better than before i hope that the conflict handling still works as expected i tested it but might have missed some special casesconfigurations change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate\nnan\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 1.0}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nwrite database type in lower case into the bib file\nthis finally 963 a quick fix has been introduced in 661eea007e555 but that does not cover the lower case writing of the databasetypebibtex change in changelogmd described this has been introduced in the development versions after the last release thus no entry required tests have been adapted to match this new implementation\nyou keep bibtex and biblatex instead of bibtex and biblatex because of innocent\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.75}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\n3929 correct fetcher messages\n3929\nnan\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 1.0}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nupdate localization instructions\ncorrected gradlew task name1312koppor stefankolb\nin my other pr 1265 already changed the errorinfo text output of the consistencytest output to the new gradle task name edit linked wrong pr siedlerchr wrong pr referenced\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.75}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfix highlight issues for lists\n5277 and fixes 5035 the problem was in both cases that the list view reuses nodes when scrolling instead of creating new ones because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg\ntobiasdiez im working on this\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.4286}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfix double paste on different os\n4845 fixes 4699 fixes 4836 upon pasting macos calls the system paste as well as this caused a duplicate call of the paste\nseems to be only a mac issue on windows 10 i cannot confirm this try updating your java to 8u202 there have been several mac specific fixes seems to be only a mac issue on windows 10 i cannot confirm this try updating your java to 8u202 there have been several mac specific fixesi did the update however the issue is unaffected i have a mac os i will investigate it bdcaf tobiasdiez cant reproduce it run jabref via intellij idea latest master thanks to linusdietz and stefankolb this issue is now fixed in the latest master\nchange duplicates window to recall sizeposition\nthe possible duplicate entries window now remembers its size and position throughout a session 6582 this was done by adding a dialogwindowstate class to the gui utils this class stores the size and position of the dialog window the statemanager class was modified to store this object it is retrieved whenever a new object is created to get the previous size and position and is updated whenever the user proceeds through the dialog options the dialogwindowstate class can be reused if this feature is needed for other dialog windows this is my first ever pull request so please let me know what you think or whether i need to retool my approach to be more in line with the structure of the rest of the code i did not include any screenshots as this felt like a sort of awkward fix to try and take screenshots of x change in changelogmd described if applicable tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.5}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nprevent the search to get focus when deletingpasting an entry\nfixes 2208when you delete an entry the focus will no longer jump to the searchbar instead it will select the next entry also counts for pasting\nbartschdev could you have a look üòá\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nnan\nnan\nnan\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 1.0}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\npreserve encoding while copy and pasting in maintable\n5043encodes and decodes data with utf8\nfirst tests show that copying is fine but pasting alters the encoding via a bibtex parser i can still reproduce the problem with today the pr is not merged yet you can try the branch version if you like it is fixed thanks a lotedit but wait there is another bug maybe related to this issue here i will test and reportedit2 the bug 5069 is not related to this issue can be closed if merged merged this now into master so will be avaiable in a couple of minutes in the master version\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.75}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nfixes that renaming a group did not change the group name in the interface\n3189\nwhen you close and expand the group the change should also be visible no idea though why it is not visible immediately the same issue occurs if you assign an icon or color to the group might be related to this these bug still exists i will work on it when i press edit group that show instead of why whats the difference between them the displayname is a formatted version of name for example if name contains latex commands like hello then displayname is the unicode version hell√≥ this should be fixed in the latest development version could you please check the build from thanks please remember to make a backup of your library before tryingout this version can confirm this has been fixed injabref 10 100 amd64 java 180191\nfixed exception about missing custom css file\nfixes 7177 java exception when trying to open the preferences with missing custom theme after some testing i found that there two main paths that could result in the same failure the css file being missing before application start and changing the name of the css file while the application is running to resolve the latter i think the best approach is to check the custom css file exists this is already done for the theme as used for most of the application however the preview viewer has it s own css url logic rather than add file checking logic to the preview viewer i have refactored and moved the theme logic of preview viewer into theme so that all css url logic is encapsulated in that class i have also put the logic that checks that the url is valid and filters it to an optionalempty into one new method additionalcsstoload in place of the field of the same name this ensure that the file existence check is performed in all cases rather than just at construction of the theme object i have kept the optional field so there should be no overhead to this approach for the built in themes and only the minor and necessary overhead of file existence checking for the custom theme for manual testing i checked previews and overall appearance for default theme are correct after restart previews and overall appearance for dark theme are correct after restart previews and overall appearance with a custom theme with a valid name are correct after restart live changes to the custom theme still work in general and for preview rename custom theme so that the configured theme is no longer correct before application start the preview is no longer themed but there is no error the preview theme is restored when the filename is restored to the configured value without restarting the application restart rename custom theme so that the configured theme is no longer correct while application is running the preview remains themed typically sized css themes are data url embedded and so survive file removal these tests were run both with the gradle run task and on the built binary rationale gradle presents the dark theme as a file while the binary has it built in on a jrt url so the results could be different pr tasks x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes na x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 1.0}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nmake bibtex parser more robust against missing newlines\nas described in 669 and 621 the parser has some problems when an entry or preamble follows directly the file encoding header on the same line ie encoding myencoding articleactually as the tests reveal it was not a problem with the actual parser but within the file opening logic i dont view this pr as a complete fix for 669 and 621 since not just the parser but also the serialization should be improvedalso fix a bug that prevented the import of bibtex entries having only a key as its content\nrelated 621 tobiasdiez is this fixed stefankolb it will be fixed with 718 too late in the evening should have seen that myself smile 1\nimprove library loading ux\nwhen jabref opens a library it opens a file runs the database parser and after everything is done creates a new tab in the frame with the contents of the open database an improvement would be to first create a tab in the frame display a loading animation and after the parser has finished display all entries or display every entry as soon as it is parsed there is a bug that i couldn t fix even after data is loaded the group pane will keep showing 0 entry you need to navigate away from the tab and back to get the real number of entries about applying the improvement on startup i think having a splash screen will look better something like a blocking dialog that displays a progressindicator closes 6417 im1 im2 im3 im4 change in changelogmd described if applicable tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.8}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\ndo not mark a new database as changed\n1881 i missed an ifstatement when inverting an ifelse in 1830 change in changelogmd described introduced in development version only fortunately manually tested changed features in running jabref\nthis is already the case file new database do nothing file close databaseno message is shown not in my development version just noticed it so i think it is something quite recent i can confirm this behaviour in the dev version on windows to my bad ill add a pr fixing this in a minute\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.6667}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\n1420 auto downloader should respect file pattern and propose correct filename\n\nnan\nfixed validation before typing in new entry dialog 7020 add ability to insert arxivid optimize saving\ndo not show an error message if there is no error fixes 7020 2292 pasted arxivid creates new bibentry x change in changelogmd described in a way that is understandable for the average user if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes x checked documentation is the information available and up to date if not created an issue at x change in changelogmd described in a way that is understandable for the average user if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.3}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\n1163 by removing the strange functionality which enabled sorting‚ä¶\nwe have some very strange logic in jabref which allows to handle years using only the two last numbers so we can detect that 68 means 1968 this causes a lot of issues i do not think that jabref should still support such strange logic and just use the value which is in the year field hence i removed it this also solves the issue of having that yearutil in the model package which duplicated a method in the stringutil class refs 1163\nnan\nfixed validation before typing in new entry dialog 7020 add ability to insert arxivid optimize saving\ndo not show an error message if there is no error fixes 7020 2292 pasted arxivid creates new bibentry x change in changelogmd described in a way that is understandable for the average user if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes x checked documentation is the information available and up to date if not created an issue at x change in changelogmd described in a way that is understandable for the average user if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required x screenshots added in pr description for ui changes x checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.7}]}
{"messages": [{"role": "system", "content": "GitHub Pair Task Issue Match Measure"}, {"role": "user", "content": "Compute, THE MEASURE, for the following GitHub pair task and author in a value between 0.0 and 1.0 based on its issueTitle, issueBody, issue_Comments, Title, Body and Comments:\nupdate architecture tests to catch static imports\nfixes a part of 2617updates the architecture tests to junit5 and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again change in changelogmd described manually tested changed features in running jabref helpjabreforg\nidea there may be checkstyle rules that can be configured to cover our architecture tests oh that was me fixed this instance in 2618 unfortunately i dont have time to investigate 2however i am happy to have raised attention to this problem by committing this mistake further architecture related desirable tests are logic and viewmodel no javafx except javafxcollections view viewmodel and controller no globals and jabrefgui no direct fxdialogservice all fxml files can be loaded successfully no fetcher is used directly outside of the import package there is a new tool called archunit maybe this is helpful\nfixed issue 6692 fix html chars formatter for percent sign\nfixes 6692 renamed listbind to bindcontent where it was used fixes 6753 x change in changelogmd described if applicable x tests created for changes if applicable x manually tested changed features in running jabref always required screenshots added in pr description for ui changes checked documentation is the information available and up to date if not created an issue at or even better submitted a pull request to the documentation repository\nnan"}, {"role": "assistant", "content": 0.3333}]}
